{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This is an adaptation of the CS50 Introduction to Python course from Harvard. The course covers the basics of Python programming, including data types, control structures, functions, and more. It also includes additional sections that align with the NSW Stage 6 Software Engineering curriculum.</p> <p>Note</p> <p>If you see a call-out section with a  icon, it means that the section is an extension and may not be covered in the syllabus.</p> <p>Extension</p> <ul> <li>this is an extension and not in the syllabus.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with the course, follow these steps:</p> <ol> <li> <p>Fork this repository by clicking the \"Fork\" button on GitHub. This will create a copy of the repository in your own account.</p> <p>Naming Convention for Repositories</p> <ul> <li>Follow the naming convention <code>&lt;year&gt;-&lt;subject&gt;-&lt;your_initials&gt;-IntroToPython</code> for your forked repository.</li> <li>For example, <code>2025-11SEO4-AB-IntroToPython</code></li> </ul> <p></p> </li> <li> <p>Complete the details of the repository. Ensure that:</p> <ul> <li>The owner is set to <code>KillarneyHeightsHS</code>.</li> <li>You have used the naming convention above for your repository.</li> </ul> <p></p> <p>then click on Fork repository.</p> </li> </ol>"},{"location":"#codespaces","title":"Codespaces","text":"<p>The quickest way to get started is to use github codespaces. If you are a student it is strongly advised to sign up to GitHub Education. You will get a Free GitHub Pro account giving you more resources and tools to work with Python. The key one being 180 hours per month with Codespaces, meaning you can develop and learn from you PC, Laptop or iPad without the need to install development tools like Python or VS Code locally.</p> <p>The attached video shows how you can start this project with Codespace.</p> <p></p>"},{"location":"#desktop","title":"Desktop","text":"<p>Different Operating Systems</p> <p>Depending on which operating system you are using, the terminal or command prompt may look different.</p> <ul> <li>On Windows, you may see <code>C:\\Users\\username\\github\\IntroToPython&gt;</code>.</li> <li>On Linux or Mac, you may see <code>$</code> or <code>%</code>.</li> </ul> <p>In all examples I will avoid using a prompt to make it easier to copy the command.</p> <ol> <li> <p>Clone your new repository to you local machine using GitHub Web, GitHub Desktop or the command line.</p> <p></p> </li> <li> <p>Ensure that you have python installed on your machine. You can download it from python.org.</p> </li> <li> <p>Ensure that pip is installed.</p> <ul> <li>Installation of pip</li> </ul> <p>If you have issues see: </p> <ul> <li>'pip' is not recognized</li> </ul> </li> <li> <p>Open a terminal or command prompt and navigate to the root directory of your repository and type:</p> </li> </ol> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"#structure-of-the-repository","title":"Structure of the Repository","text":"<p>The repository is structured as follows:</p> <ul> <li><code>README.md</code>: This file contains an overview of the course and installation instructions.</li> <li><code>docs/</code>: This directory contains the course materials, including lectures, assignments, and solutions.</li> <li><code>requirements.txt</code>: This file lists the Python packages required for the course.</li> <li><code>src/</code>: This directory contains any source code or scripts that are part of the course. Your solutions should go here</li> <li><code>tests/</code>: This directory contains any test files for the course.</li> </ul>"},{"location":"#course-basics","title":"Course Basics","text":"<p>The intention is for you to start from Lesson 0 and work through each lesson in order. Each lesson will have a corresponding set of exercises or problems that you should complete. The solutions to these exercises should be placed in the <code>src/</code> directory. As an example, if you are working on the Indoor voice problem from Lesson 0, your solutions should be placed in <code>src/function_variables/indoor.py</code>.</p>"},{"location":"#submission","title":"Submission","text":"<ul> <li>To submit your work, simply push it to your GitHub repository. </li> <li>To receive feedback on your work, please email your teacher.</li> </ul> <p>If you want to confirm that your code is working correctly, you can run the tests in the <code>tests/</code> directory using the following command from the root directory.</p> <p>For example, if you want to check that your code is working correctly for the <code>indoor()</code> method from Lesson 0, you can run:</p> <pre><code>pytest -k \"indoor\"\n</code></pre>"},{"location":"#getting-new-lessons","title":"Getting New Lessons","text":"<p>To get new lessons, simply sync the latest changes from the repository. You can do this in GitHub's codespaces or locally.</p> <p>Follow these instructions.</p>"},{"location":"0.%20Functions_Variables/","title":"Functions &amp; Variables","text":""},{"location":"0.%20Functions_Variables/#video","title":"Video","text":"<p>  (1:45hr)</p>"},{"location":"0.%20Functions_Variables/#creating-code-with-python","title":"Creating Code with Python","text":"<ul> <li>VS Code is a special type of text editor that is called an IDE (Integrated Development Environment). At the top, you\u2019ll notice a text editor. </li> <li>At the bottom, you will see a terminal where you can execute commands. Type Ctrl+` to open a new terminal window, if one is not open.</li> <li>In the terminal, you can execute <code>code hello.py</code> to start coding.</li> <li>In the text editor above, you can type <code>print(\"hello, world\")</code>. This is a famous canonical program that nearly all coders write during their learning process.</li> <li>In the terminal window, you can execute commands. To run this program, you are going to need to move your cursor to the bottom of the screen, clicking in the terminal window. You can now type a second command in the terminal window. Next to the dollar sign, type <code>python hello.py</code> and press the enter key on your keyboard.</li> <li>Recall that computers really only understand zeros and ones. Therefore, when you run <code>python hello.py</code>, python will interpret the text that you created in hello.py and translate it into the zeros and ones that the computer can understand.</li> <li>The result of running the <code>python hello.py</code> program is <code>hello, world</code>.</li> <li>Congrats! You just created your first program.</li> </ul>"},{"location":"0.%20Functions_Variables/#repl-read-evaluate-print-and-loop","title":"REPL - Read, Evaluate, Print and Loop","text":"<ul> <li>Python has a built-in interactive interpreter called the Python REPL (Read-Eval-Print Loop). This allows you to type and execute code directly from your terminal.</li> <li>To open the Python REPL, type <code>python</code> and press enter.</li> <li>You can now type code directly into your terminal and see the results immediately.</li> <li>To exit the Python REPL, type <code>exit()</code> and press enter.</li> <li>Type <code>print(\"hello, world\")</code> and press enter to see the result.</li> </ul>"},{"location":"0.%20Functions_Variables/#functions","title":"Functions","text":"<ul> <li>Functions are verbs or actions that the computer or computer language will already know how to perform.</li> <li>In your <code>hello.py</code> program, the print function knows how to <code>print</code> to the terminal window.</li> <li>The print function takes arguments. In this case, <code>\"hello, world\"</code> are the arguments that the print function takes.</li> </ul>"},{"location":"0.%20Functions_Variables/#bugs","title":"Bugs","text":"<ul> <li>Bugs are a natural part of coding. These are mistakes, problems for you to solve! Don\u2019t get discouraged! This is part of the process of becoming a great programmer.</li> <li>Imagine in our <code>hello.py</code> program that accidentally typed <code>print(\"hello, world\"</code> notice that we missed the final <code>)</code> required by the compiler. If I purposefully make this mistake, you\u2019ll the compiler will output an error in the terminal window!</li> <li>Often, the error messages will inform you of your mistakes and provide you clues on how to fix them. However, there will be many times when the compiler is not this kind.</li> </ul>"},{"location":"0.%20Functions_Variables/#improving-your-first-python-program","title":"Improving Your First Python Program","text":"<ul> <li>We can personalise your first Python program.</li> <li>In our text editor in <code>hello.py</code> we can add another function. input is a function that takes a prompt as an argument. We can edit our code to say <pre><code>input(\"What's your name? \")\nprint(\"hello, world\")\n</code></pre></li> <li>This edit alone, however, will not allow your program to output what your user inputs. For that, we will need to introduce you to variables</li> </ul>"},{"location":"0.%20Functions_Variables/#variables","title":"Variables","text":"<ul> <li>A variable is just a container for a value within your own program.</li> <li>In your program, you can introduce your own variable in your program by editing it to read <pre><code>name = input(\"What's your name? \")\nprint(\"hello, world\")\n</code></pre></li> <li> <p>Notice that this equal = sign in the middle of <code>name = input(\"What's your name? \")</code> has a special role in programming. This equal sign literally assigns what is on the right to what is on the left. Therefore, the value returned by <code>input(\"What's your name? \")</code> is assigned to name.</p> </li> <li> <p>If you edit your code as follows, you will notice an error <pre><code>name = input(\"What's your name? \")\nprint(\"hello, name\")\n</code></pre></p> </li> <li>The program will return hello, name in the terminal window regardless of what the user types.</li> <li>Further editing our code, you could type <pre><code>name = input(\"What's your name? \")\nprint(\"hello,\")\nprint(name)\n</code></pre></li> <li>The result in the terminal window would be <pre><code>What's your name? David\nhello\nDavid\n</code></pre></li> <li>We are getting closer to the result we might intend!</li> <li>You can learn more in Python\u2019s documentation on data types.</li> </ul>"},{"location":"0.%20Functions_Variables/#comments","title":"Comments","text":"<ul> <li>Comments are a way for programmers to track what they are doing in their programs and even inform others about their intentions for a block of code. In short, they are notes for yourself and others who will see your code!</li> <li>You can add comments to your program to be able to see what it is that your program is doing. You might edit your code as follows: <pre><code># Ask the user for their name\nname = input(\"What's your name? \")\nprint(\"hello,\")\nprint(name)\n</code></pre></li> <li>Comments can also serve as a to-do list for you.</li> </ul>"},{"location":"0.%20Functions_Variables/#pseudocode","title":"Pseudocode","text":"<p>Pseudocode is a method of describing the logic in an algorithm. It makes use of capitalised keywords and indentation to show control structures used.</p> <p>In pseudocode:</p> <ul> <li>keywords are written in capitals</li> <li>structural elements come in pairs, eg for every BEGIN there is an END, for every IF there is an ENDIF</li> <li>indenting is used to identify control structures in the algorithm</li> <li>when refining the solution to a problem, a subroutine can be referred to in an algorithm by its name, with a separate subroutine developed with that same name to show the detailed logic</li> </ul> <p>Using pseudocode is important especially when you don\u2019t understand how to accomplish a coding task. For example, you might plan out an algorithm before you start coding. This will help you understand what needs to be done and how it should be done.</p> PseudocodePython <pre><code>BEGIN\n    GET name FROM USER\n    PRINT \"Hello,\"\n    PRINT name\nEND\n</code></pre> <pre><code># Get the name of the user\nname = input(\"What's your name? \")\n\n# Print hello\nprint(\"Hello,\")\n\n# Print the name inputted\nprint(name)\n</code></pre>"},{"location":"0.%20Functions_Variables/#further-improving-your-first-python-program","title":"Further Improving Your First Python Program","text":"<ul> <li>We can further edit our code as follows: <pre><code># Ask the user for their name\nname = input(\"What's your name? \")\n\n# Print hello and the inputted name\nprint(\"hello, \" + name)\n</code></pre></li> <li>It turns out that some functions take many arguments.</li> <li>We can use a comma <code>,</code> to pass in multiple arguments by editing our code as follows: <pre><code># Ask the user for their name\nname = input(\"What's your name? \")\n\n# Print hello and the inputted name\nprint(\"hello,\", name)\n</code></pre></li> <li>The output in the terminal, if we typed \u201cDavid\u201d we would be <code>hello, David</code>. Success.</li> </ul>"},{"location":"0.%20Functions_Variables/#strings-and-parameters","title":"Strings and Parameters","text":"<ul> <li>A string, known as a str in Python, is a sequence of text.</li> <li> <p>Rewinding a bit in our code back to the following, there was a visual side effect of having the result appear on multiple lines: <pre><code># Ask the user for their name\nname = input(\"What's your name? \")\nprint(\"hello,\")\nprint(name)\n</code></pre></p> </li> <li> <p>Functions take arguments that influence their behaviour. If we look at the documentation for print you\u2019ll notice we can learn a lot about the arguments that the print function takes.</p> </li> <li>Looking at this documentation, you\u2019ll learn that the print function automatically includes a piece of code <code>end='\\n'</code>. This <code>\\n</code> indicates that the print function will automatically create a line break when run. The print function takes an argument called <code>end</code> and the default is to create a new line.</li> <li> <p>However, we can technically provide an argument for <code>end</code> ourselves such that a new line is not created!</p> </li> <li> <p>We can modify our code as follows: <pre><code># Ask the user for their name\nname = input(\"What's your name? \")\nprint(\"hello,\", end=\"\")\nprint(name)\n</code></pre>     By providing <code>end=\"\"</code> we are overwriting the default value of end such that it never creates a new line after this first print statement. Providing the name as \u201cDavid\u201d, the output in the terminal window will be <code>hello, David</code>.</p> </li> <li> <p>Parameters, therefore, are arguments that can be taken by a function.</p> </li> <li>You can learn more in Python\u2019s documentation on print.</li> </ul>"},{"location":"0.%20Functions_Variables/#a-small-problem-with-quotation-marks","title":"A small problem with quotation marks","text":"<ul> <li>Notice how adding quotation marks as part of your string is challenging.</li> <li><code>print(\"hello,\"friend\"\")</code> will not work, and the compiler will throw an error.</li> <li>Generally, there are two approaches to fixing this. First, you could simply change the quotes to single quotation marks.</li> <li>Another, more commonly used approach would be code as <code>print(\"hello, \\\"friend\\\"\")</code>. The backslashes tell the compiler that the following character should be considered a quotation mark in the string and avoid a compiler error.</li> </ul>"},{"location":"0.%20Functions_Variables/#formatting-strings","title":"Formatting Strings","text":"<ul> <li>Probably the most elegant way to use strings would be as follows: <pre><code># Ask the user for their name\nname = input(\"What's your name? \")\nprint(f\"hello, {name}\")\n</code></pre>     Notice the <code>f</code> in <code>print(f\"hello, {name}\")</code>. This <code>f</code> is a special indicator, called an f-string, for Python to treat this string a special way, different than previous approaches we have illustrated in this lecture. Expect that you will be using this style of strings quite frequently in this course.</li> </ul>"},{"location":"0.%20Functions_Variables/#more-on-strings","title":"More on Strings","text":"<ul> <li>You should never expect your user to cooperate as intended. Therefore, you will need to ensure that the input of your user is corrected or checked.</li> <li>It turns out that built into strings is the ability to remove whitespace from a string.</li> <li> <p>By utilising the method strip on name as name = name.strip(), will strip all the whitespaces on the left and right of the users input. You can modify your code to be: <pre><code># Ask the user for their name\nname = input(\"What's your name? \")\n\n# Remove whitespace from the str\nname = name.strip()\n\n# Print the output\nprint(f\"hello, {name}\")\n</code></pre> Rerunning this program, regardless of how many spaces you type before or after the name, it will strip off all the whitespace.</p> </li> <li> <p>Using the title method, it would title case the user\u2019s name: <pre><code># Ask the user for their name\nname = input(\"What's your name? \")\n\n# Remove whitespace from the str\nname = name.strip()\n\n# Capitalize the first letter of each word\nname = name.title()\n\n# Print the output\nprint(f\"hello, {name}\")\n</code></pre></p> </li> <li>By this point, you might be very tired of typing python repeatedly in the terminal window. You cause use the up arrow of your keyboard to recall the most recent terminal commands you have made.</li> <li> <p>Notice that you can modify your code to be more efficient: <pre><code># Ask the user for their name\nname = input(\"What's your name? \")\n\n# Remove whitespace from the str and capitalise the first letter of each word\nname = name.strip().title()\n\n# Print the output\nprint(f\"hello, {name}\")\n</code></pre>     This creates the same result as your previous code.</p> </li> <li> <p>We could even go further! <pre><code># Ask the user for their name, remove whitespace from the str and capitalise the first letter of each word\nname = input(\"What's your name? \").strip().title()\n\n# Print the output\nprint(f\"hello, {name}\")\n</code></pre></p> </li> <li>You can learn more about strings in Python\u2019s documentation on str.</li> </ul>"},{"location":"0.%20Functions_Variables/#integers-or-int","title":"Integers or int","text":"<ul> <li>In Python, an integer is referred to as an <code>int</code>.</li> <li>In the world of mathematics, we are familiar with +, -, *, /, and % operators. That last operator <code>%</code> or modulo operator may not be very familiar to you.</li> <li>You don\u2019t have to use the text editor window in your compiler to run Python code. Down in your terminal, you can run python alone. You will be presented with <code>&gt;&gt;&gt;</code> in the terminal window. You can then run live, interactive code. You could type <code>1+1</code>, and it will run that calculation. This mode will not commonly be used during this course.</li> <li> <p>Opening up VS Code again, we can type <code>code calculator.py</code> in the terminal. This will create a new file in which we will create our own calculator.</p> </li> <li> <p>First, we can declare a few variables. <pre><code>x = 1\ny = 2\n\nz = x + y\n\nprint(z)\n</code></pre> Naturally, when we run <code>python calculator.py</code> we get the result in the terminal window of 3. We can make this more interactive using the input function. <pre><code>x = input(\"What's x? \")\ny = input(\"What's y? \")\n\nz = x + y\n\nprint(z)\n</code></pre></p> </li> <li>Running this program, we discover that the output is incorrect as <code>12</code>. Why might this be?</li> <li>Prior, we have seen how the <code>+</code> sign concatenates two strings. Because your input from your keyboard on your computer comes into the compiler as text, it is treated as a string. We, therefore, need to convert this input from a string to an integer. We can do so as follows: <pre><code>x = input(\"What's x? \")\ny = input(\"What's y? \")\n\nz = int(x) + int(y)\n\nprint(z)\n</code></pre></li> <li>The result is now correct. The use of <code>int(x)</code> is called \u201ccasting,\u201d where a value is temporarily changed from one type of variable (in this case, a string) to another (here, an integer).</li> <li>We can further improve our program as follows: <pre><code>x = int(input(\"What's x? \"))\ny = int(input(\"What's y? \"))\n\nprint(x + y)\n</code></pre>     This illustrates that you can run functions on functions. The inner function is run first, and then the outer one is run. First, the input function is run. Then, the int function.</li> <li>You can learn more in Python\u2019s documentation of int.</li> </ul>"},{"location":"0.%20Functions_Variables/#readability-wins","title":"Readability Wins","text":"<ul> <li>When deciding on your approach to a coding task, remember that one could make a reasonable argument for many approaches to the same problem.</li> <li>Regardless of what approach you take to a programming task, remember that your code must be readable. You should use comments to give yourself and others clues about what your code is doing. Further, you should create code in a way that is readable.</li> </ul>"},{"location":"0.%20Functions_Variables/#float-basics","title":"Float Basics","text":"<ul> <li>A floating point value is a real number that has a decimal point in it, such as <code>0.52</code>.</li> <li> <p>You can change your code to support floats as follows: <pre><code>x = float(input(\"What's x? \"))\ny = float(input(\"What's y? \"))\n\nprint(x + y)\n</code></pre>     This change allows your user to enter <code>1.2</code> and <code>3.4</code> to present a total of <code>4.6</code>.</p> </li> <li> <p>Let\u2019s imagine, however, that you want to round the total to the nearest integer. Looking at the Python documentation for round, you\u2019ll see that the available arguments are <code>round(number[n, ndigits])</code>. Those square brackets indicate that something optional can be specified by the programmer. Therefore, you could do <code>round(n)</code> to round a digit to its nearest integer. Alternatively, you could code as follows: <pre><code># Get the user's input\nx = float(input(\"What's x? \"))\ny = float(input(\"What's y? \"))\n\n# Create a rounded result\nz = round(x + y)\n\n# Print the result\nprint(z)\n</code></pre> The output will be rounded to the nearest integer.</p> </li> <li> <p>What if we wanted to format the output of long numbers? For example, rather than seeing <code>1000</code>, you may wish to see <code>1,000</code>. You could modify your code as follows: <pre><code># Get the user's input\nx = float(input(\"What's x? \"))\ny = float(input(\"What's y? \"))\n\n# Create a rounded result\nz = round(x + y)\n\n# Print the formatted result\nprint(f\"{z:,}\")\n</code></pre>     Though quite cryptic, that <code>print(f\"{z:,}\")</code> creates a scenario where the outputted z will include commas where the result could look like <code>1,000</code> or <code>2,500</code>.</p> </li> </ul>"},{"location":"0.%20Functions_Variables/#more-on-floats","title":"More on Floats","text":"<ul> <li> <p>How can we round floating point values? First, modify your code as follows: <pre><code># Get the user's input\nx = float(input(\"What's x? \"))\ny = float(input(\"What's y? \"))\n\n# Calculate the result\nz = x / y\n\n# Print the result\nprint(z)\n</code></pre>     When inputting <code>2</code> as x and <code>3</code> as y, the result z is <code>0.6666666666</code>, seemingly going on to infinite as we might expect.</p> </li> <li> <p>Let\u2019s imagine that we want to round this down. We could modify our code as follows: <pre><code># Get the user's input\nx = float(input(\"What's x? \"))\ny = float(input(\"What's y? \"))\n\n# Calculate the result and round\nz = round(x / y, 2)\n\n# Print the result\nprint(z)\n</code></pre>     As we might expect, this will round the result to the nearest two decimal points.</p> </li> <li> <p>We could also use <code>f-string</code> to format the output as follows: <pre><code># Get the user's input\nx = float(input(\"What's x? \"))\ny = float(input(\"What's y? \"))\n\n# Calculate the result\nz = x / y\n\n# Print the result\nprint(f\"{z:.2f}\")\n</code></pre>     This cryptic <code>f-string</code> code displays the same as our prior rounding strategy.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of float.</p> </li> </ul>"},{"location":"0.%20Functions_Variables/#functions_1","title":"Functions","text":"<ul> <li>Wouldn\u2019t it be nice to create our own functions?</li> <li>Let\u2019s bring back our final code of <code>hello.py</code> by typing <code>code hello.py</code> into the terminal window. Your starting code should look as follows: <pre><code># Ask the user for their name, remove whitespace from the str and capitalise the first letter of each word\nname = input(\"What's your name? \").strip().title()\n\n# Print the output\nprint(f\"hello, {name}\")\n</code></pre> We can better our code to create our own special function that says \u201chello\u201d for us!</li> <li> <p>Erasing all our code in our text editor, let\u2019s start from scratch: <pre><code>name = input(\"What's your name? \")\nhello()\nprint(name)\n</code></pre> Attempting to run this code, your compiler will throw an error. After all, there is no defined function for hello.</p> </li> <li> <p>We can create our own function called hello as follows: <pre><code>def hello():\n    print(\"hello\")\n\n\nname = input(\"What's your name? \")\nhello()\nprint(name)\n</code></pre>     Notice that everything under <code>def hello()</code> is indented. Python is an indented language. It uses indentation to understand what is part of the above function. Therefore, everything in the hello function must be indented. When something is not indented, it treats it as if it is not inside the <code>hello</code> function. Running <code>python hello.py</code> in the terminal window, you\u2019ll see that your output is not exactly as you may want.</p> </li> <li> <p>We can further improve our code: <pre><code># Create our own function\ndef hello(to):\n    print(\"hello,\", to)\n\n\n# Output using our own function\nname = input(\"What's your name? \")\nhello(name)\n</code></pre>     Here, in the first lines, you are creating your <code>hello</code> function. This time, however, you are telling the compiler that this function takes a single parameter: a variable called to. Therefore, when you call <code>hello(name)</code> the computer passes <code>name</code> into the <code>hello</code> function as to. This is how we pass values into functions. Very useful! Running <code>python hello.py</code> in the terminal window, you\u2019ll see that the output is much closer to our ideal presented earlier in this lecture.</p> </li> <li> <p>We can change our code to add a default value to hello: <pre><code># Create our own function\ndef hello(to=\"world\"):\n    print(\"hello,\", to)\n\n\n# Output using our own function\nname = input(\"What's your name? \")\nhello(name)\n\n# Output without passing the expected arguments\nhello()\n</code></pre>     Test out your code yourself. Notice how the first <code>hello</code> will behave as you might expect, and the second hello, which is not passed a value, will, by default, output <code>hello, world</code>.</p> </li> <li> <p>We don\u2019t have to have our function at the start of our program. We can move it down, but we need to tell the compiler that we have a <code>main</code> function and a separate <code>hello</code> function. <pre><code>def main():\n\n    # Output using our own function\n    name = input(\"What's your name? \")\n    hello(name)\n\n    # Output without passing the expected arguments\n    hello()\n\n\n# Create our own function\ndef hello(to=\"world\"):\n    print(\"hello,\", to)\n</code></pre>     This alone, however, will create an error of sorts. If we run <code>python hello.py</code>, nothing happens! The reason for this is that nothing in this code is actually calling the <code>main</code> function and bringing our program to life.</p> </li> <li> <p>The following very small modification will call the main function and restore our program to working order: <pre><code>def main():\n\n    # Output using our own function\n    name = input(\"What's your name? \")\n    hello(name)\n\n    # Output without passing the expected arguments\n    hello()\n\n\n# Create our own function\ndef hello(to=\"world\"):\n    print(\"hello,\", to)\n\n\nmain()\n</code></pre></p> </li> </ul>"},{"location":"0.%20Functions_Variables/#returning-values","title":"Returning Values","text":"<ul> <li> <p>You can imagine many scenarios where you don\u2019t just want a function to perform an action but also to return a value back to the main function. For example, rather than simply printing the calculation of <code>x + y</code>, you may want a function to return the value of this calculation back to another part of your program. This \u201cpassing back\u201d of a value we call a <code>return</code> value.</p> <p>Returning to our <code>calculator.py</code> code by typing <code>code calculator.py</code>. Erase all code there. Rework the code as follows: <pre><code>def main():\n    x = int(input(\"What's x? \"))\n    print(\"x squared is\", square(x))\n\n\ndef square(n):\n    return n * n\n\n\nmain()\n</code></pre> Effectively, x is passed to square. Then, the calculation of x * x is returned back to the main function.</p> </li> </ul>"},{"location":"0.%20Functions_Variables/#summing-up","title":"Summing Up","text":"<p>Through the work of this single lecture, you have learned abilities that you will use countless times in your own programs. You have learned about\u2026</p> <ul> <li>Creating your first programs in Python;</li> <li>Functions;</li> <li>Bugs;</li> <li>Variables;</li> <li>Comments;</li> <li>Pseudocode;</li> <li>Strings;</li> <li>Parameters;</li> <li>Formatted Strings;</li> <li>Integers;</li> <li>Principles of readability;</li> <li>Floats;</li> <li>Creating your own functions; and</li> <li>Return values.</li> </ul>"},{"location":"0.%20Functions_Variables/Exercises/problem1/","title":"Indoor Voice","text":"<p>WRITING IN ALL CAPS IS LIKE YELLING.</p> <p>Best to use your \u201cindoor voice\u201d sometimes, writing entirely in lowercase.</p> <p>In a file called <code>indoor.py</code>, implement a program in Python that prompts the user for input and then outputs that same input in lowercase. Punctuation and whitespace should be outputted unchanged. You\u2019re welcome, but not required, to prompt the user explicitly, by passing a <code>str</code> of your own as an argument to <code>input</code>.</p> Tip <ul> <li>Recall that input returns a str, per functions.</li> <li>Recall that a str comes with quite a few methods, per string-methods.</li> </ul>"},{"location":"0.%20Functions_Variables/Exercises/problem1/#before-you-begin","title":"Before You Begin","text":"<ol> <li>Ensure you are in the root directory of the repository that you cloned to your machine.</li> <li>Change directory to <code>src/function_variables/</code> in your terminal window. <pre><code>cd src/function_variables/\n</code></pre></li> <li>create or open the file <code>indoor.py</code> <pre><code>code indoor.py\n</code></pre> This is where you\u2019ll write your program.</li> </ol>"},{"location":"0.%20Functions_Variables/Exercises/problem1/#how-to-test","title":"How to Test","text":"<p>Here\u2019s how to test your code manually. At the indoor/ $ prompt in your terminal:</p> <ul> <li>Run your program with <code>python indoor.py</code>. Type <code>HELLO</code> and press Enter. Your program should output <code>hello</code>.</li> <li>Run your program with <code>python indoor.py</code>. Type <code>THIS IS CS50</code> and press Enter. Your program should output <code>this is cs50</code>.</li> <li>Run your program with <code>python indoor.py</code>. Type <code>50</code> and press Enter. Your program should output <code>50</code>.</li> </ul> <p>If you run into an error saying your file cannot be opened, retrace your steps to be sure that you are inside your <code>function_variables</code> folder and have saved your <code>indoor.py</code> file there. Remember how?</p> <p>You can execute the below to check your code using <code>pytest</code> from the root directory.</p> <pre><code>pytest .\\tests\\function_variables\\test_indoor.py\n</code></pre> <p>A green output from running the test means it was successful. A red output means there is a bug in your code that you need to fix.</p> <pre><code>============================= test session starts ===============================\nplatform win32 -- Python 3.13.1, pytest-7.2.2, pluggy-1.5.0\nrootdir: C:\\Users\\jabba\\khhs\\github\\IntroToPython, configfile: pyproject.toml\nplugins: cov-4.0.0\ncollected 1 item                                                                                                                                                                                                                                                       \n\ntests\\function_variables\\test_indoor.py .                                                                                                                                                                                                                                  [100%] \n\n========================= 1 passed in 0.03s ========================================\n</code></pre>"},{"location":"0.%20Functions_Variables/Exercises/problem1/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"0.%20Functions_Variables/Exercises/problem1/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"0.%20Functions_Variables/Exercises/problem1/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/functions_variables $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"your message here\"\n</code></pre> Commit all changes in the REPO with the comment \u201cyour message here\u201c note: If the file is not complete, adjust the comment to describes what is being committed</p> <p>Note</p> <p>Remember to replace \"your message here\" with a meaningful commit message that describes your changes.</p> <p><pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"0.%20Functions_Variables/Exercises/problem2/","title":"Playback Speed","text":"<p>Some people have a habit of lecturing speaking rather quickly, and it\u2019d be nice to slow them down, a la YouTube\u2019s 0.75 playback speed, or even by having them pause between words.</p> <p>In a file called <code>playback.py</code>, implement a program in Python that prompts the user for input and then outputs that same input, replacing each space with <code>...</code> (i.e., three periods).</p>"},{"location":"0.%20Functions_Variables/Exercises/problem2/#hints","title":"Hints","text":"Tip <ul> <li>Recall that input returns a str, per input.</li> <li>Recall that a <code>str</code> comes with quite a few methods, per string-methods.</li> </ul>"},{"location":"0.%20Functions_Variables/Exercises/problem2/#before-you-begin","title":"Before You Begin","text":"<ol> <li>Ensure you are in the root directory of the repository that you cloned to your machine.</li> <li>Change directory to <code>src/function_variables/</code> in your terminal window. <pre><code>cd src/function_variables/\n</code></pre></li> <li>create or open the file <code>playback.py</code> <pre><code>code playback.py\n</code></pre> This is where you\u2019ll write your program.</li> </ol>"},{"location":"0.%20Functions_Variables/Exercises/problem2/#how-to-test","title":"How to Test","text":"<p>Here\u2019s how to test your code manually:</p> <ul> <li> <p>Run your program with <code>python playback.py</code>. Type <code>This is Killarney Heights!</code> and press Enter. Your program should output: <pre><code>    This...is...Killarney...Heights! \n</code></pre></p> </li> <li> <p>Run your program with <code>python playback.py</code>. Type <code>This is our week on functions</code> and press Enter. Your program should output: <pre><code>    This...is...our...week...on...functions\n</code></pre></p> </li> <li>Run your program with <code>python playback.py</code>. Type <code>Let's implement a function called hello</code> and press Enter. Your program should output <pre><code>    Let's...implement...a...function...called...hello\n</code></pre></li> </ul> <p>You can execute the below to check your code using <code>pytest</code> from the root directory.</p> <pre><code>.\\tests\\function_variables\\test_playback.py\n</code></pre> <p>A green output from running the test means it was successful. A red output means there is a bug in your code that you need to fix.</p>"},{"location":"0.%20Functions_Variables/Exercises/problem2/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"0.%20Functions_Variables/Exercises/problem2/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"0.%20Functions_Variables/Exercises/problem2/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/functions_variables $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"your message here\"\n</code></pre> Commit all changes in the REPO with the comment \u201cyour message here\u201c note: If the file is not complete, adjust the comment to describes what is being committed</p> <p>Note</p> <p>Remember to replace \"your message here\" with a meaningful commit message that describes your changes.</p> <p><pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"0.%20Functions_Variables/Exercises/problem3/","title":"Making Faces","text":"<p>Before there were emoji, there were emoticons, whereby text like <code>:)</code> was a happy face and text like <code>:(</code> was a sad face. Nowadays, programs tend to convert emoticons to emoji automatically!</p> <p>In a file called <code>faces.py</code>, implement a function called <code>convert</code> that accepts a <code>str</code> as input and returns that same input with any <code>:)</code> converted to \ud83d\ude42 (otherwise known as a slightly smiling face) and any :( converted to \ud83d\ude41 (otherwise known as a slightly frowning face). All other text should be returned unchanged.</p> <p>Then, in that same file, implement a function called <code>main</code> that prompts the user for input, calls <code>convert</code> on that input, and prints the result. You\u2019re welcome, but not required, to prompt the user explicitly, as by passing a <code>str</code> of your own as an argument to input. Be sure to call <code>main</code> at the bottom of your file.</p> Tip <ul> <li>Recall that <code>input</code> returns a <code>str</code>, per input.</li> <li>Recall that a <code>str</code> comes with quite a few methods, per string-methods.</li> <li>An emoji is actually just a character, so you can quote it like any <code>str</code>, a la <code>\"\ud83d\ude10\"</code>. And you can copy and paste the emoji from this page into your own code as needed.</li> </ul>"},{"location":"0.%20Functions_Variables/Exercises/problem3/#before-you-begin","title":"Before You Begin","text":"<ol> <li>Ensure you are in the root directory of the repository that you cloned to your machine.</li> <li>Change directory to <code>src/function_variables/</code> in your terminal window. <pre><code>cd src/function_variables/\n</code></pre></li> <li>create or open the file <code>faces.py</code> <pre><code>code faces.py\n</code></pre> This is where you\u2019ll write your program.</li> </ol>"},{"location":"0.%20Functions_Variables/Exercises/problem3/#how-to-test","title":"How to Test","text":""},{"location":"0.%20Functions_Variables/Exercises/problem3/#heres-how-to-test-your-code-manually","title":"Here\u2019s how to test your code manually:","text":"<ul> <li>Run your program with python faces.py. Type <code>Hello :)</code> and press Enter. Your program should output: <pre><code>Hello \ud83d\ude42\n</code></pre></li> <li>Run your program with python faces.py. Type <code>Goodbye :(</code> and press Enter. Your program should output: <pre><code>Goodbye \ud83d\ude41\n</code></pre></li> <li>Run your program with python faces.py. Type <code>Hello :) Goodbye :(</code> and press Enter. Your program should output <pre><code>Hello \ud83d\ude42 Goodbye \ud83d\ude41\n</code></pre></li> </ul> <p>You can execute the below to check your code using <code>pytest</code> from the root directory.</p> <pre><code>.\\tests\\function_variables\\test_faces.py\n</code></pre> <p>A green output from running the test means it was successful. A red output means there is a bug in your code that you need to fix.</p>"},{"location":"0.%20Functions_Variables/Exercises/problem3/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"0.%20Functions_Variables/Exercises/problem3/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"0.%20Functions_Variables/Exercises/problem3/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/functions_variables $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"your message here\"\n</code></pre> Commit all changes in the REPO with the comment \u201cyour message here\u201c note: If the file is not complete, adjust the comment to describes what is being committed</p> <p>Note</p> <p>Remember to replace \"your message here\" with a meaningful commit message that describes your changes.</p> <p><pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"0.%20Functions_Variables/Exercises/problem4/","title":"Einstein","text":"<p>Even if you haven\u2019t studied physics (recently or ever!), you might have heard that \\(E=mc^2\\), wherein \\(E\\) represents energy (measured in Joules), \\(m\\) represents mass (measured in kilograms), and \\(c\\) represents the speed of light (measured approximately as 300000000 meters per second), per Albert Einstein et al. Essentially, the formula means that mass and energy are equivalent.</p> <p>In a file called <code>einstein.py</code>, implement a program in Python that prompts the user for mass as an integer (in kilograms) and then outputs the equivalent number of Joules as an integer. Assume that the user will input an integer. There should be a function called <code>realativity</code>, which takes an integer as input and returns an integer representing the equivalent number of Joules.</p> Tip <ul> <li>Recall that <code>input</code> returns a <code>str</code>, per input.</li> <li>Recall that a <code>str</code> comes with quite a few methods, per string-methods.</li> <li>Recall that Python comes with several built-in functions, per functions.</li> </ul>"},{"location":"0.%20Functions_Variables/Exercises/problem4/#before-you-begin","title":"Before You Begin","text":"<ol> <li>Ensure you are in the root directory of the repository that you cloned to your machine.</li> <li>Change directory to <code>src/function_variables/</code> in your terminal window. <pre><code>cd src/function_variables/\n</code></pre></li> <li>create or open the file <code>einstein.py</code> <pre><code>code einstein.py\n</code></pre> This is where you\u2019ll write your program.</li> </ol>"},{"location":"0.%20Functions_Variables/Exercises/problem4/#how-to-test","title":"How to Test","text":""},{"location":"0.%20Functions_Variables/Exercises/problem4/#heres-how-to-test-your-code-manually","title":"Here\u2019s how to test your code manually:","text":"<ul> <li>Run your program with <code>python einstein.py</code>. Type <code>1</code> and press Enter. Your program should output: <pre><code>    90000000000000000\n</code></pre></li> <li>Run your program with <code>python einstein.py</code>. Type <code>14</code> and press Enter. Your program should output: <pre><code>    1260000000000000000\n</code></pre></li> <li>Run your program with <code>python einstein.py</code>. Type <code>50</code> and press Enter. Your program should output <pre><code>    4500000000000000000\n</code></pre></li> </ul> <p>You can execute the below to check your code using <code>pytest</code> from the root directory.</p> <pre><code>.\\tests\\function_variables\\test_faces.py\n</code></pre> <p>A green output from running the test means it was successful. A red output means there is a bug in your code that you need to fix.</p>"},{"location":"0.%20Functions_Variables/Exercises/problem4/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"0.%20Functions_Variables/Exercises/problem4/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"0.%20Functions_Variables/Exercises/problem4/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/functions_variables $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"your message here\"\n</code></pre> Commit all changes in the REPO with the comment \u201cyour message here\u201c note: If the file is not complete, adjust the comment to describes what is being committed</p> <p>Note</p> <p>Remember to replace \"your message here\" with a meaningful commit message that describes your changes.</p> <p><pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"0.%20Functions_Variables/Exercises/problem5/","title":"GST Calculator","text":"<p>Some countries charge GST (goods and services tax), which is paid on most services and purchased items. This tax is:</p> <ul> <li>10% in Australia</li> <li>15% in New Zealand</li> <li>17% in China. </li> </ul> <p>Write a program that prompts the user for the amount of their purchase and the percentage the country charges for GST. The program should print GST amount being charged on their purchase. For example, if the user inputs <code>$100</code> and <code>10%</code>, the program should output $10.00.</p> <p>Warning</p> <p>Symbols like \u00a5 and \u00a3 are non ASCII characters and should not be used in this program. Only use ASCII characters for now. We will cover internationalisation (I18n) in a later lesson.</p> <pre><code>def main():\n    purchase = input(\"How much was the purchase? \")\n    percentage = input(\"What percentage is the GST rate? \")\n    gst = calculate_gst(purchase, percentage)\n    print(f\"GST will be ${gst:.2f}\")\n\ndef calculate_gst(purchase, percentage):\n    price = currency_to_float(purchase)\n    percent = percent_to_float(percentage)\n    gst = price * percent\n\n    return gst\n\n\ndef currency_to_float(d):\n    # TODO\n\n\ndef percent_to_float(p):\n    # TODO\n\n\nmain()\n</code></pre> <p>Well, we\u2019ve written most of a GST calculator for you. Unfortunately, we didn\u2019t have time to implement two functions:</p> <ul> <li><code>currency_to_float</code>, which should accept a <code>str</code> as input (formatted as <code>$##.##,</code> wherein each <code>#</code> is a decimal digit), remove the leading <code>$</code>, and return the amount as a <code>float</code>. For instance, given <code>$50.00</code> as input, it should return <code>50.0</code>.</li> <li><code>percent_to_float</code>, which should accept a <code>str</code> as input (formatted as <code>##%,</code> wherein each <code>#</code> is a decimal digit), remove the trailing <code>%</code>, and return the percentage as a <code>float</code>. For instance, given <code>15%</code> as input, it should return <code>0.15</code>.</li> </ul> <p>Assume that the user will input values in the expected formats.</p> Tip <ul> <li>Recall that <code>input</code> returns a <code>str</code>, per input.</li> <li>Recall that a <code>str</code> comes with quite a few methods, per string-methods.</li> <li>Recall that <code>float</code> can convert a <code>str</code> to a <code>float</code>, per float.</li> </ul>"},{"location":"0.%20Functions_Variables/Exercises/problem5/#before-you-begin","title":"Before You Begin","text":"<ol> <li>Ensure you are in the root directory of the repository that you cloned to your machine.</li> <li>Change directory to <code>src/function_variables/</code> in your terminal window. <pre><code>cd src/function_variables/\n</code></pre></li> <li>create or open the file <code>gst.py</code> <pre><code>code gst.py\n</code></pre> This is where you\u2019ll write your program.</li> </ol>"},{"location":"0.%20Functions_Variables/Exercises/problem5/#how-to-test","title":"How to Test","text":""},{"location":"0.%20Functions_Variables/Exercises/problem5/#heres-how-to-test-your-code-manually","title":"Here\u2019s how to test your code manually:","text":"<p>Run your program with python gst.py. Type $50.00 and press Enter. Then, type 15% and press Enter. Your program should output: <pre><code>GST will be $7.50    \n</code></pre> Run your program with python gst.py. Type $100.00 and press Enter. Then, type 18% and press Enter. Your program should output: <pre><code>GST will be $18.00\n</code></pre> Run your program with python gst.py. Type \u00a515.00 and press Enter. Then, type 17% and press Enter. Your program should output: <pre><code>GST will be \u00a53.75\n</code></pre></p> <p>You can execute the below to check your code using <code>pytest</code> from the root directory.</p> <pre><code>.\\tests\\function_variables\\test_gst.py\n</code></pre> <p>A green output from running the test means it was successful. A red output means there is a bug in your code that you need to fix.</p>"},{"location":"0.%20Functions_Variables/Exercises/problem5/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"0.%20Functions_Variables/Exercises/problem5/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"0.%20Functions_Variables/Exercises/problem5/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/functions_variables $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"your message here\"\n</code></pre> Commit all changes in the REPO with the comment \u201cyour message here\u201c note: If the file is not complete, adjust the comment to describes what is being committed</p> <p>Note</p> <p>Remember to replace \"your message here\" with a meaningful commit message that describes your changes.</p> <p><pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"1.%20DataTypes/","title":"DataTypes","text":""},{"location":"1.%20DataTypes/#number-systems","title":"Number Systems","text":"<p>There are 4 main number systems used in computing:</p> <ol> <li>Decimal: Base 10, uses digits 0-9.</li> <li>Binary: Base 2, uses digits 0 and 1.</li> <li>Hexadecimal: Base 16, uses digits 0-9 and letters A-F.</li> <li>Octal: Base 8, uses digits 0-7.</li> </ol> <p>We will focus on the first three number systems in this course.</p> Octal <p>The octal number system is used most commonly in Unix-based systems, such as Linux and macOS to define file permissions. Octal numbers represent execution, read and write permissions respectively. For example, the number 7 in octal represents read, write and execute permissions for a file. The number 5 represents read and execute permissions only.</p> <p>eg: A file with permissions <code>755</code> in octal means that the owner has read, write and execute permissions (7), while the group and others have only read and execute permissions (5).</p> <p>The table below represents the first 16 numbers in each number system</p> Decimal Hexadecimal Binary 0 0x0 0000 1 0x1 0001 2 0x2 0010 3 0x3 0011 4 0x4 0100 5 0x5 0101 6 0x6 0110 7 0x7 0111 8 0x8 1000 9 0x9 1001 10 0xA 1010 11 0xB 1011 12 0xC 1100 13 0xD 1101 14 0xE 1110 15 0xF 1111"},{"location":"1.%20DataTypes/#decimal","title":"Decimal","text":"<ul> <li>Decimals are a core numerical type in the majority of software languages. </li> <li>They are used to represent whole numbers and can be positive or negative.</li> <li>Integers, floats, doubles, and longs are all types of decimals.<ul> <li>Integer (int) - 5, -5, 45792</li> <li>Float (float) - 5.2, -3.4</li> <li>Double (double) - 5.234, -3.456789</li> <li>Long (long) - 523456789, -34567890</li> </ul> </li> </ul> <p>Note</p> <ul> <li>In Python you only need to use <code>int</code> and <code>float</code>. There is no inbuilt <code>long</code> or <code>double</code> type.</li> </ul>"},{"location":"1.%20DataTypes/#binary","title":"Binary","text":"<p>Binary is a base 2 number system. It uses only two digits: 0 and 1. Binary is used in computing because it can be easily represented by electronic circuits, which have two states: on or off. Every line of code you write as a software engineer is converted into binary code that the computer can understand. Any technology that you use today that is labelled as being digital is based on binary.</p> <ul> <li>To represent a decimal value in binary, you can use the built-in function <code>bin()</code> in Python. For example: <pre><code>print(bin(10))  # Output: '0b1010'\n</code></pre></li> <li> <p>Notice the <code>0b</code> prefix. This is used to indicate that the number is in binary format.</p> </li> <li> <p>The reverse is also possible. You can convert binary to decimal using the built-in function <code>int()</code> with base 2. For example: <pre><code>print(int('1010', 2))  # Output: 10\n</code></pre></p> </li> </ul> <p>To count in binary, you can use the following table:</p> Decimal Binary 0 0 1 1 2 10 3 11 4 100 5 101 6 110 7 111 8 1000 9 1001 10 1010 <p>Take the number 10 for example. It is the sum of 2^3 + 2^1. So in binary, it is represented as <code>1010</code>.</p>"},{"location":"1.%20DataTypes/#2s-complement","title":"2s Complement","text":"<p>2s complement is a way to represent signed integers in binary. It allows you to represent both positive and negative numbers using the same number of bits. The most significant bit (MSB) represents the sign of the number, where <code>0</code> indicates a positive number and <code>1</code> indicates a negative number.</p> <p>In the example above, the number 10 is represented as <code>01010</code> in 2s complement, notice the <code>0</code> at the beginning. To represent -10 in 2s complement, you need to invert all the bits starting from the first <code>1</code> from the left. In this case, it would be <code>10110</code>. </p> <p>The key think to note here is that when there are <code>n</code> bits to represent a number, the range is from <code>-2^(n-1)</code> to <code>2^(n-1)-1</code>. For example, with 4 bits, the range is from -8 to 7.</p>"},{"location":"1.%20DataTypes/#bitwise-operations","title":"Bitwise Operations","text":"<p>One of the most versatile operations in programming is bitwise operations. It allows you to manipulate individual bits of a number. Typically they are used to perform low-level operations on data, such as setting or clearing bits in a register, flags for features being on or off, complex yet fast matching of patterns, separating communications data and compressing data.</p>"},{"location":"1.%20DataTypes/#and","title":"AND (&amp;)","text":"<p>This operation compares each bit of its first operand to the corresponding bit of its second operand. If both bits are 1, the corresponding result bit is set to 1. Otherwise, it is set to 0. A good example of this </p>"},{"location":"1.%20DataTypes/#or","title":"OR (|)","text":"<p>This operation compares each bit of its first operand to the corresponding bit of its second operand. If either bit is 1, the corresponding result bit is set to 1. Otherwise, it is set to 0. A good example of this is when you want to turn on a specific feature in a program.</p> <p>Your binary data might be <code>0100</code> with each bit representing a feature flag. The example here indicates that the first feature is on. To turn on the second feature, you would use <code>0100 | 0010 = 0110</code> and to check if first feature is on, you would use <code>0100 &amp; 0100 != 0</code>. </p>"},{"location":"1.%20DataTypes/#xor","title":"XOR (^)","text":"<p>This operation called \"exclusive or\" compares each bit of its first operand to the corresponding bit of its second operand. If the bits are different, the corresponding result bit is set to 1. Otherwise, it is set to 0. This is used in cryptography to scramble data by using a key to change only certain bits. If you have the same data encrypted twice with different keys, you can XOR them to get back the original data. Another use is in parity checks to ensure data is not corrupted.</p>"},{"location":"1.%20DataTypes/#not","title":"NOT (~)","text":"<p>This operation is the bitwise negation of its operand. It flips all the bits in a binary number. For example, <code>~0100</code> is <code>1011</code>. You can use this to to quickly convert a binary number to its two's complement representation, which is the bitwise not of the value minus 1. </p>"},{"location":"1.%20DataTypes/#left-and-right-shift","title":"Left (&lt;&lt;) and Right Shift (&gt;&gt;)","text":"<p>These are commonly used in games to do integer division/multiplication by powers of 2, as well as in graphics programming to manipulate pixel data.</p> Endianess <p>Different uses of binary have different endianess. Endianess refers to the order in which bytes are stored in memory, either from most significant byte (MSB) to least significant byte (LSB), or vice versa. There are two types of endianness: little-endian and big-en`dian. For example, Intel uses little-endian, while ARM uses big-endian. This means that the most significant bit (MSB) may be on the left or right depending on the system.</p>"},{"location":"1.%20DataTypes/#hexadecimal","title":"Hexadecimal","text":"<p>The most common use of hexadecimals is in colour codes, where each colour component (red, green, blue) is represented by a two-digit hexadecimal number. For example, the colour white is represented as <code>FFFFFF</code> in hexadecimal. The reason for using hexadecimals is that it allows us to represent a large range of values with a smaller number of digits, making it easier to read and write.</p>"},{"location":"1.%20DataTypes/#rainbow-colours","title":"Rainbow Colours","text":"Red Orange Yellow Green Blue Indigo Violet Header 1 #FF0000 #FF7F00 #FFFF00 #00FF00 #0000FF #4B0082 #9400D3 Data Row 1 #FF6347 #FFA500 #FFFF45 #90EE90 #ADD8E6 #5F9EA0 #AB82BF Data Row 2 #FF4500 #FFD700 #ADFF2F #F0FFF0 #E6E6FA #708090 #BC8F8F"},{"location":"1.%20DataTypes/#char-character-and-string","title":"Char (character) and String","text":"<p>Python doesn't have a built-in <code>char</code> type, but you can use a string of length 1 to represent a character. A string is a sequence of characters, so you can also use strings to represent multiple characters. Originally, Python used ASCII encoding for its <code>char</code> type, but now it uses Unicode encoding. Unicode encoding allows Python to represent a wide range of characters from different languages. Unicode is backward compatible with ASCII, so you can still use ASCII characters in your strings. </p> <ul> <li>The decimal value for <code>a</code> is 97, which corresponds to the ASCII code for lowercase 'a'.</li> <li>The decimal value for <code>A</code> is 65, which corresponds to the ASCII code for uppercase 'A'.</li> <li>You can convert a character to its corresponding ASCII value using the <code>ord()</code> function.  </li> <li>You can convert an ASCII value back to a character using the <code>chr()</code> function. For example:</li> </ul>"},{"location":"1.%20DataTypes/#boolean","title":"Boolean","text":"<p>Boolean values are represented as either <code>True</code> or <code>False</code>. In Python, you can use the <code>bool()</code> function to convert other data types to boolean values. </p>"},{"location":"1.%20DataTypes/#real","title":"Real","text":"<p>Real numbers are represented as floating-point numbers in Python. You can use the <code>float()</code> function to convert other data types to real numbers. </p>"},{"location":"1.%20DataTypes/#single-precision-float","title":"Single Precision Float","text":"<p>Single precision float is a type that uses 32 bits to represent a floating-point number in some computer languages like C or Java. You can also have double precision float which uses 64 bits to represent a floating-point number as it is double the size of a single precision float. </p> <p>Python does not differentiate between single and double precision floats, as it uses the <code>float()</code> type for both.</p>"},{"location":"1.%20DataTypes/#integer","title":"Integer","text":"<p>Integers are represented as whole numbers in Python. You can use the <code>int()</code> function to convert other data types to integers.</p>"},{"location":"1.%20DataTypes/#date-and-time","title":"Date and Time","text":"<p>Date and time representation in most languages is done using built-in libraries or modules. For example, in Python, you can use the <code>datetime</code> module to work with dates and times. The most common way to represent a date and time is using an epoch timestamp, which represents the number of seconds since January 1, 1970, at midnight UTC. </p> <p>Note</p> <ul> <li>Date and time representation in different languages may vary depending on the library or module used.</li> <li>It is also important to note that date and time representation can be affected by time zones.</li> <li>They can be one of the most common bug in software development, so it's essential to handle them correctly.</li> </ul>"},{"location":"1.%20DataTypes/Exercises/problem1/","title":"Secret Code Translator","text":"<p>You're developing a secret messaging app for your friends. Create a program that converts text messages into their ASCII decimal values and back again.</p> Hints <ul> <li>Use Python's <code>ord()</code> function to convert a character to its ASCII value</li> <li>Use <code>chr()</code> to convert an ASCII value back to a character</li> <li>Try storing the decimal values in a list. A list in python is a collection of items which can be of different types. You can store any type of data in a list, such as integers, strings, floats, etc.  <pre><code># List example\nmy_list = [1, 2, 3, \"hello\", 4.5]\nfor item in my_list:\n    print(item)\n</code></pre></li> </ul>"},{"location":"1.%20DataTypes/Exercises/problem1/#before-you-begin","title":"Before You Begin","text":"<p>The boilerplate code has been provided for you. Open the file <code>src/datatypes/translator.py</code> in vscode. You will need to implement two functions: <code>text_to_decimal()</code> and <code>decimal_to_text()</code>. </p> <p>The first function should take a string as input and return a list of integers representing the ASCII values of each character in the string. </p> <p>The second function should take a list of integers as input and return a string that is the concatenation of the characters represented by those ASCII values.</p>"},{"location":"1.%20DataTypes/Exercises/problem1/#how-to-test","title":"How to test","text":"<ol> <li>Run your program with <code>python translator.py</code>.</li> <li>Try changing the function calls in the <code>if __name__ == \"__main__\":</code> block and see if it works as expected. <pre><code>if __name__ == \"__main__\":\n    # Test with a secret message\n    secret = text_to_decimal(\"Hi, my name is Slim Shady!\")\n    print(secret)\n    decoded = decimal_to_text(secret)\n    print(decoded)\n</code></pre></li> </ol>"},{"location":"1.%20DataTypes/Exercises/problem1/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"1.%20DataTypes/Exercises/problem1/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"1.%20DataTypes/Exercises/problem1/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/datatypes $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"your message here\"\n</code></pre> Commit all changes in the REPO with the comment \u201cyour message here\u201c note: If the file is not complete, adjust the comment to describes what is being committed</p> <p>Note</p> <p>Remember to replace \"your message here\" with a meaningful commit message that describes your changes.</p> <p><pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"1.%20DataTypes/Exercises/problem2/","title":"Colour Code Creator","text":"<p>You're designing a website and need to work with color codes. Create a program that converts RGB color values (decimal) to hexadecimal color codes.</p>"},{"location":"1.%20DataTypes/Exercises/problem2/#instructions","title":"Instructions","text":"<ul> <li>Write a function <code>rgb_to_hex</code> that takes three integers representing the red, green, and blue components of a color.</li> <li>The function should return a string representing the hexadecimal color code in the format <code>#RRGGBB</code>.</li> </ul> Hints <ul> <li>Remember that RGB values range from 0-255</li> <li>Use Python's built-in hex() function, but you'll need to format the output correctly</li> <li>The final format should be \"#RRGGBB\" (like \"#FF0000\" for red)</li> </ul> <p>The boilerplate code has been provided for you. Open the file <code>src/datatypes/color_code.py</code> in vscode. You will need to implement the function <code>rgb_to_hex</code>. </p>"},{"location":"1.%20DataTypes/Exercises/problem2/#how-to-test","title":"How to test","text":"<ol> <li>Run your program with <code>python color_code.py</code>.</li> <li>Try changing the function calls in the <code>if __name__ == \"__main__\":</code> block and see if it works as expected.</li> </ol> <pre><code>if __name__ == \"__main__\":\n    print(rgb_to_hex(255, 0, 0))  # Expected output: \"#FF0000\"\n    print(rgb_to_hex(0, 255, 0))  # Expected output: \"#00FF00\"\n    print(rgb_to_hex(0, 0, 255))  # Expected output: \"#0000FF\"\n</code></pre>"},{"location":"1.%20DataTypes/Exercises/problem2/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"1.%20DataTypes/Exercises/problem2/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"1.%20DataTypes/Exercises/problem2/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/datatypes $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"Upload completed colour_code.py\"\n</code></pre> Commit all changes in the REPO with the comment \u201cUpload completed colour_code.py\u201c note: If the file is not complete, adjust the comment to describes what is being committed <pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"1.%20DataTypes/Exercises/problem3/","title":"Binary Data Visualiser","text":"<p>You're developing an educational tool that helps students visualise binary-to-decimal and decimal-to-binary conversions. Create a program that not only performs the conversions but also shows each step of the process visually.</p> Hints <ul> <li>You may want to look at lists, loops and string formatting for creating a clear output.</li> <li>For binary to decimal conversion:<ul> <li>Create a visual representation showing each bit position (from right to left)</li> <li>Display the power of 2 for each position</li> <li>Show the contribution of each bit to the final sum when it's 1</li> <li>Use string formatting to create an aligned, easy-to-read output</li> </ul> </li> <li>For decimal to binary conversion:<ul> <li>Show each step of the \"divide by 2\" algorithm</li> <li>Display both the quotient and remainder at each step</li> <li>Demonstrate how the remainders, read from bottom to top, form the binary result</li> <li>Consider adding a visual representation like a division ladder</li> </ul> </li> </ul> <ul> <li>Test with different numbers to ensure your visualisation works for various lengths of binary and decimal values</li> <li>Challenge extension: Add a graphical representation using ASCII art or simple console graphics to make the powers of 2 more visually apparent</li> </ul>"},{"location":"1.%20DataTypes/Exercises/problem3/#before-you-begin","title":"Before You Begin","text":"<p>The boilerplate code has been provided for you. Open the file <code>src/datatypes/numbers.py</code> in vscode.</p>"},{"location":"1.%20DataTypes/Exercises/problem3/#how-to-test","title":"How to test","text":"<ol> <li>Run your program with <code>python numbers.py</code>.</li> <li>Try changing the function calls in the <code>if __name__ == \"__main__\":</code> block and see if it works as expected.</li> </ol>"},{"location":"1.%20DataTypes/Exercises/problem3/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"1.%20DataTypes/Exercises/problem3/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"1.%20DataTypes/Exercises/problem3/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/datatypes $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"Upload completed numbers.py\"\n</code></pre> Commit all changes in the REPO with the comment \u201cUpload completed numbers.py\u201c note: If the file is not complete, adjust the comment to describes what is being committed <pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"1.%20DataTypes/Exercises/problem4/","title":"Data Type Investigation","text":"<p>You have a box that can contain any type of object (integer, float, string, list, etc.). Write a Python program that takes this object as input, determines its data type, and prints out whether it\u2019s an integer, float, string, list, or dictionary.</p> Hints <ul> <li>You can use the <code>type()</code> function to determine the data type of an object.</li> <li>Use conditional statements (if, elif, else) to check the type and print the appropriate message.</li> <li>Consider using a dictionary to map types to their string representations for cleaner code.</li> </ul>"},{"location":"1.%20DataTypes/Exercises/problem4/#before-you-begin","title":"Before You Begin","text":"<p>The boilerplate code has been provided for you. Open the file <code>src/datatypes/object_type.py</code> in vscode. You will need to implement the function: <code>print_data_type(obj)</code>. </p>"},{"location":"1.%20DataTypes/Exercises/problem4/#how-to-test","title":"How to test","text":"<ol> <li>Run your program with <code>python object_type.py</code>.</li> <li>Try adding different types of values under <code>if __name__ == \"__main__\":</code> block and see if it works as expected. <pre><code>if __name__ == \"__main__\":\n    # Test with various conversions\n    print_data_type(123)\n    print_data_type(\"hello\")\n    print_data_type('test')\n</code></pre></li> </ol> <p>Note</p> <p>Your tests should cover more data types than in the example.</p>"},{"location":"1.%20DataTypes/Exercises/problem4/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"1.%20DataTypes/Exercises/problem4/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"1.%20DataTypes/Exercises/problem4/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/datatypes $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"Upload completed object_type.py\"\n</code></pre> Commit all changes in the REPO with the comment \u201cUpload completed object_type.py\u201c note: If the file is not complete, adjust the comment to describes what is being committed <pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"1.%20DataTypes/Exercises/problem5/","title":"Binary Bit Manipulation Challenge","text":"<p>You're writing security software that needs to encrypt data using bitwise operations. Create a program that demonstrates how to manipulate individual bits in a byte of data.</p> Hints <ul> <li>Research Python's bitwise operators: &amp; (AND), | (OR), ^ (XOR), ~ (NOT), &lt;&lt;    (left - shift), &gt;&gt; (right shift)</li> <li>To flip a specific bit, use the XOR operator with a value that has only that  bit - set</li> <li>Visualise the binary representations at each step to understand what's happening</li> <li>Challenge: Add a function that rotates bits left or right in a circular pattern</li> </ul> <p>Boilerplate code has been provided for you. Complete the functions and add tests to ensure your program works as expected.</p>"},{"location":"1.%20DataTypes/Exercises/problem5/#how-to-test","title":"How to Test","text":"<p>Here is how to test you code manually. At the <code>datatypes/ $</code> prompt in your terminal: :</p> <ol> <li> <p>Run your program with <code>python security.py</code>. Check that the default values in the program are correctly encrypted and decrypted.</p> </li> <li> <p>Add additional values to check if the code works. Sometimes it is easier to start with a small number as you can desk check your work.</p> </li> </ol>"},{"location":"1.%20DataTypes/Exercises/problem5/#pytest","title":"Pytest","text":"<p>You can execute the below to check your code using <code>pytest</code> from the root directory.</p> <pre><code>pytest .\\tests\\datatypes\\test_security.py\n</code></pre> <p>A green output from running the test means it was successful. A red output means there is a bug in your code that you need to fix.</p>"},{"location":"1.%20DataTypes/Exercises/problem5/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"1.%20DataTypes/Exercises/problem5/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"1.%20DataTypes/Exercises/problem5/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/datatypes/security $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"Upload completed security.py\"\n</code></pre> Commit all changes in the REPO with the comment \u201cUpload completed security.py\u201c note: If the file is not complete, adjust the comment to describes what is being committed <pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"2.%20Conditionals/","title":"Conditionals","text":""},{"location":"2.%20Conditionals/#video","title":"Video","text":"<p> (0:55hr)</p>"},{"location":"2.%20Conditionals/#dictionary-of-terms","title":"Dictionary of Terms","text":"<ol> <li>Assignment</li> <li>Equality</li> <li>Conditional control structures</li> <li>Boolean</li> <li><code>if</code> statement</li> <li><code>if else</code> statement</li> <li><code>if elif else</code> statement</li> <li><code>or</code> <code>and</code> <code>not</code> conditions</li> <li>modulo operator</li> <li>match case (switch case)</li> </ol>"},{"location":"2.%20Conditionals/#conditionals_1","title":"Conditionals","text":"<p>Conditionals allow you, the programmer, to allow your program to make decisions: As if your program has the choice between taking the left-hand road or the right-hand road based upon certain conditions. Built within Python are a set of \u201coperators\u201d that can are used to ask mathematical questions.</p> <ul> <li><code>&gt;</code> and <code>&lt;</code> symbols are probably quite familiar to you.</li> <li><code>&gt;=</code> denotes \u201cgreater than or equal to.\u201d</li> <li><code>&lt;=</code> denotes \u201cless than or equal to.\u201d</li> <li><code>==</code> denotes \u201cequals, though do notice the double equal sign! A single equal sign would assign a value. Double equal signs are used to compare variables.</li> <li><code>!=</code> denotes \u201cnot equal to.</li> </ul> <p>Conditional statements compare a left-hand term to a right-hand term.</p>"},{"location":"2.%20Conditionals/#if-statements","title":"if Statements","text":"<ul> <li>In your terminal window, type code <code>compare.py</code>. This will create a brand new file called \u201ccompare.\u201d</li> <li> <p>In the text editor window, begin with the following: <pre><code>x = int(input(\"What's x? \"))\ny = int(input(\"What's y? \"))\n\nif x &lt; y:\n    print(\"x is less than y\")\n</code></pre> Notice how your program takes the input of the user for both x and y, casting them as integers and saving them into their respective x and y variables. Then, the <code>if</code> statement compares x and y. If the condition of <code>x &lt; y</code> is met, the <code>print</code> statement is executed.</p> </li> <li> <p>If statements use <code>bool</code> or boolean values (true or false) to decide whether or not to execute. If the statement of <code>x &gt; y</code> is true, the compiler will register it as <code>true</code> and execute the code.</p> </li> </ul>"},{"location":"2.%20Conditionals/#control-flow-elif-and-else","title":"Control Flow: elif, and else","text":"<ul> <li> <p>Further revise your code as follows: <pre><code>x = int(input(\"What's x? \"))\ny = int(input(\"What's y? \"))\n\nif x &lt; y:\n    print(\"x is less than y\")\nif x &gt; y:\n    print(\"x is greater than y\")\nif x == y:\n    print(\"x is equal to y\")\n</code></pre> Notice how you are providing a series of <code>if</code> statements. First, the first <code>if</code> statement is evaluated. Then, the second <code>if</code> statement runs its evaluation. Finally, the last <code>if</code> statement runs its evaluation. This flow of decisions is called \u201ccontrol flow.\u201d</p> </li> <li> <p>Our code can be represented as follows: <pre><code>flowchart TD\n    id1([Start])\n    id2([Stop])\n\n    id1 --&gt; id3{x &lt; y}\n    id3 -- True --&gt; id4(\"x is less than y\")\n    id3 -- False --&gt; id5{x &gt; y}\n    id4 --&gt; id5\n    id5 -- True --&gt; id6(\"x is greater than y\")\n    id5 -- False --&gt; id7{x == y}\n    id6 --&gt; id7\n    id7 -- True --&gt; id8(\"x is equal to y\")\n    id7 -- False --&gt; id2\n    id8 --&gt; id2</code></pre></p> </li> <li> <p>This program can be improved by not asking three consecutive questions. After all, not all three questions can have an outcome of true! Revise your program as follows: <pre><code>x = int(input(\"What's x? \"))\ny = int(input(\"What's y? \"))\n\nif x &lt; y:\n    print(\"x is less than y\")\nelif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x is equal to y\")\n</code></pre> Notice how the use of <code>elif</code> allows the program to make less decisions. First, the <code>if</code> statement is evaluated. If this statement is found to be true, all the <code>elif</code> statements not be run at all. However, if the <code>if</code> statement is evaluated and found to be false, the first <code>elif</code> will be evaluated. If this is true, it will not run the final evaluation.</p> </li> </ul> <p>Our code can be represented as follows:</p> <pre><code>flowchart TD\n    id1([Start])\n    id2([Stop])\n\n    id1 --&gt; id3{x &lt; y}\n    id3 -- True --&gt; id4(\"x is less than y\")\n    id4 --&gt; id2\n    id3 -- False --&gt; id5{x &gt; y}\n    id5 -- True --&gt; id6(\"x is greater than y\")\n    id6 --&gt; id2\n    id5 -- False --&gt; id7{x == y}\n    id7 -- True --&gt; id8(\"x is equal to y\")\n    id8 --&gt; id2\n    id7 -- False --&gt; id2</code></pre> <ul> <li>While your computer may not notice a difference speed-wise between our first program and this revised program, consider how an online server running billions or trillions of these types of calculations each day could definitely be impacted by such a small coding decision.</li> <li>There is one final improvement we can make to our program. Notice how logically <code>elif x == y</code> is not a necessary evaluation to run. After all, if logically x is not less than y AND x is not greater than y, x MUST equal y. Therefore, we don\u2019t have to run elif <code>x == y</code>. We can create a \u201ccatch-all,\u201d default outcome using an <code>else</code> statement. We can revise as follows: <pre><code>x = int(input(\"What's x? \"))\ny = int(input(\"What's y? \"))\n\nif x &lt; y:\n    print(\"x is less than y\")\nelif x &gt; y:\n    print(\"x is greater than y\")\nelse:\n    print(\"x is equal to y\")\n</code></pre> Notice how the relative complexity of this program has decreased through our revision.</li> </ul> <p>Our code can be represented as follows:</p> <pre><code>flowchart TD\n    id1([Start])\n    id2([Stop])\n\n    id1 --&gt; id3[x = read input]\n    id3 --&gt; id4[y = read input]\n    id4 --&gt; id5{x &lt; y}\n    id5 -- True --&gt; id6(\"x is less than y\")\n    id6 --&gt; id2\n    id5 -- False --&gt; id7{x &gt; y}\n    id7 -- True --&gt; id8(\"x is greater than y\")\n    id8 --&gt; id2\n    id7 -- False --&gt; id9(\"x is equal to y\")\n    id9 --&gt; id2</code></pre>"},{"location":"2.%20Conditionals/#operators","title":"Operators","text":""},{"location":"2.%20Conditionals/#or","title":"or","text":"<ul> <li> <p><code>or</code> allows your program to decide between one or more alternatives. For example, we could further edit our program as follows: <pre><code>x = int(input(\"What's x? \"))\ny = int(input(\"What's y? \"))\n\nif x &lt; y or x &gt; y:\n    print(\"x is not equal to y\")\nelse:\n    print(\"x is equal to y\")\n</code></pre> Notice that the result of our program is the same, but the complexity is decreased and the efficiency of our code is increased.</p> </li> <li> <p>At this point, our code is pretty great. However, could the design be further improved? We could further edit our code as follows: <pre><code>x = int(input(\"What's x? \"))\ny = int(input(\"What's y? \"))\n\nif x != y:\n    print(\"x is not equal to y\")\nelse:\n    print(\"x is equal to y\")\n</code></pre> Notice how we removed the <code>or</code> entirely, and simply asked \u201cis x not equal to y?\u201d We ask one and only one question. Very efficient!</p> </li> <li> <p>For the purpose of illustration, we could also change our code as follows: <pre><code>x = int(input(\"What's x? \"))\ny = int(input(\"What's y? \"))\n\nif x == y:\n    print(\"x is equal to y\")\nelse:\n    print(\"x is not equal to y\")\n</code></pre> Notice that the <code>==</code> operator evaluates if what is on the left and right are equal to one another. That use of double equal signs (<code>equality</code>) is very important. If you use only one equal sign, an error will be thrown by the compiler as it is being used as an assignment operator.</p> </li> <li> <p>Our code can be illustrated as follows:</p> </li> </ul> <pre><code>flowchart TD\n    id1([Start])\n    id2([Stop])\n\n    id1 --&gt; id3[x = read input]\n    id3 --&gt; id4[y = read input]\n    id4 --&gt; id5{x == y}\n    id5 -- True --&gt; id6(\"x is equal to y\")\n    id6 --&gt; id2\n    id5 -- False --&gt; id7(x is not equal to y)\n    id7 --&gt; id2</code></pre>"},{"location":"2.%20Conditionals/#and","title":"and","text":"<ul> <li>Similar to <code>or</code>, <code>and</code> can be used within conditional statements.</li> <li> <p>Execute in the terminal window <code>code grade.py</code>. Start your new program as follows: <pre><code>score = int(input(\"Score: \"))\n\nif score &gt;= 90 and score &lt;= 100:\n    print(\"Grade: A\")\nelif score &gt;=80 and score &lt; 90:\n    print(\"Grade: B\")\nelif score &gt;=70 and score &lt; 80:\n    print(\"Grade: C\")\nelif score &gt;=60 and score &lt; 70:\n    print(\"Grade: D\")\nelse:\n    print(\"Grade: F\")\n</code></pre> Notice that executing <code>python grade.py</code> you will be able to input a score and get a grade. However, notice how there are potentials for bugs.</p> </li> <li> <p>Typically, we do not want to ever trust our user to input the correct information. We could improve our code as follows: <pre><code>score = int(input(\"Score: \"))\n\nif 90 &lt;= score &lt;= 100:\n    print(\"Grade: A\")\nelif 80 &lt;= score &lt; 90:\n    print(\"Grade: B\")\nelif 70 &lt;= score &lt; 80:\n    print(\"Grade: C\")\nelif 60 &lt;= score &lt; 70:\n    print(\"Grade: D\")\nelse:\n    print(\"Grade: F\")\n</code></pre> Notice how Python allows you to chain together the operators and conditions. This is quite uncommon in other programming languages.</p> </li> <li> <p>Still, we can further improve our program: <pre><code>score = int(input(\"Score: \"))\n\nif score &gt;= 90:\n    print(\"Grade: A\")\nelif score &gt;= 80:\n    print(\"Grade: B\")\nelif score &gt;= 70:\n    print(\"Grade: C\")\nelif score &gt;= 60:\n    print(\"Grade: D\")\nelse:\n    print(\"Grade: F\")\n</code></pre> Notice how the program is improved by checking few conditions. This makes our program easier to read and far more maintainable in the future.</p> </li> <li> <p>You can learn more in Python\u2019s documentation on control flow.</p> </li> </ul>"},{"location":"2.%20Conditionals/#modulo","title":"Modulo <code>%</code>","text":"<ul> <li>In mathematics, parity refers to whether a number is either even or odd.</li> <li>The modulo <code>%</code> operator in programming allows one to see if two numbers divide evenly or divide and have a remainder.</li> <li>For example, 4 % 2 would result in zero, because it evenly divides. However, 3 % 2 does not divide evenly and would result in a number other than zero!</li> <li>In the terminal window, create a new program by typing <code>code parity.py</code>. In the text editor window, type your code as follows: <pre><code>x = int(input(\"What's x? \"))\n\nif x % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")\n</code></pre> Notice how our users can type in any integer to see if it is even or odd.</li> </ul>"},{"location":"2.%20Conditionals/#creating-our-own-parity-function","title":"Creating Our Own Parity Function","text":"<ul> <li>As discussed in Lecture 0, you will find it useful to create a function of your own! We-  can create our own function to check whether a number is even or odd. Adjust your code as follows: <pre><code>def main():\n    x = int(input(\"What's x? \"))\n    if is_even(x):\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\n\ndef is_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n\n\nmain()\n</code></pre> Notice that one reason our <code>if</code> statement <code>is_even(x)</code> works, even though there is no operator there. This is because our function returns a <code>bool</code> (or boolean), true or false, back to the main function. The <code>if</code> statement simply evaluates whether or not <code>is_even</code> of <code>x</code> is true or false.</li> </ul>"},{"location":"2.%20Conditionals/#pythonic","title":"Pythonic","text":"<ul> <li> <p>In the programming world, there are types of programming that are called \u201cPythonic\u201d in nature. That is, there are ways to program that are sometimes only seen in Python programming. Consider the following revision to our program: <pre><code>def main():\n    x = int(input(\"What's x? \"))\n    if is_even(x):\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\ndef is_even(n):\n    return True if n % 2 == 0 else False\n\nmain()\n</code></pre> Notice that this return statement in our code is almost like a sentence in English. This is a unique way of coding only seen in Python.</p> </li> <li> <p>We can further revise our code and make it more and more readable: <pre><code>        def main():\n            x = int(input(\"What's x? \"))\n            if is_even(x):\n                print(\"Even\")\n            else:\n                print(\"Odd\")\n\n\n        def is_even(n):\n            return n % 2 == 0\n\n        main()\n</code></pre> Notice that the program will evaluate what is happening within the <code>n % 2 == 0</code> as either true or false and simply return that to the main function.</p> </li> </ul>"},{"location":"2.%20Conditionals/#match-statement","title":"match Statement","text":"<p>Similar to <code>if</code>, <code>elif</code>, and <code>else</code> statements, match statements can be used to conditionally run code that matches certain values.</p> <p>Note</p> <p>In other languages this would be called a <code>case</code> statement.</p> <ul> <li> <p>Consider the following program: <pre><code>name = input(\"What's your name? \")\n\nif name == \"Harry\":\n    print(\"Gryffindor\")\nelif name == \"Hermione\":\n    print(\"Gryffindor\")\nelif name == \"Ron\":\n    print(\"Gryffindor\")\nelif name == \"Draco\":\n    print(\"Slytherin\")\nelse:\n    print(\"Who?\")\n</code></pre> Notice the first three conditional statements print the same response.</p> </li> <li> <p>We can improve this code slightly with the use of the <code>or</code> keyword: <pre><code>name = input(\"What's your name? \")\n\nif name == \"Harry\" or name == \"Hermione\" or name == \"Ron\":\n    print(\"Gryffindor\")\nelif name == \"Draco\":\n    print(\"Slytherin\")\nelse:\n    print(\"Who?\")\n</code></pre> Notice the number of <code>elif</code> statements has decreased, improving the readability of our code.</p> </li> <li> <p>Alternatively, we can use <code>match</code> statements to map names to houses. Consider the following code: <pre><code>name = input(\"What's your name? \")\n\n        match name:\n            case \"Harry\":\n                print(\"Gryffindor\")\n            case \"Hermione\":\n                print(\"Gryffindor\")\n            case \"Ron\":\n                print(\"Gryffindor\")\n            case \"Draco\":\n                print(\"Slytherin\")\n            case _:\n                print(\"Who?\")\n</code></pre> Notice the use of the <code>_</code> symbol in the last case. This will match with any input, resulting in similar behaviour as an <code>else</code> statement.</p> </li> <li> <p>A match statement compares the value following the <code>match</code> keyword with each of the values following the <code>case</code> keywords. In the event a match is found, the respective indented code section is executed and the program stops the matching.</p> </li> <li>We can improve the code: <pre><code>name = input(\"What's your name? \")\n\nmatch name:\n    case \"Harry\" | \"Hermione\" | \"Ron\":\n        print(\"Gryffindor\")\n    case \"Draco\":\n        print(\"Slytherin\")\n    case _:\n        print(\"Who?\")\n</code></pre> Notice, the use of the single vertical bar <code>|</code>. Much like the <code>or</code> keyword, this allows us to check for multiple values in the same case statement.</li> </ul>"},{"location":"2.%20Conditionals/#summing-up","title":"Summing Up","text":"<ul> <li> <p>You now have the power within Python to use conditional statements to ask questions and have your program take action accordingly. In this lecture, we discussed\u2026</p> </li> <li> <p>Conditionals;</p> </li> <li><code>if</code> Statements;</li> <li>Control flow, <code>elif</code>, and <code>else</code>;</li> <li><code>or</code>;</li> <li><code>and</code>;</li> <li>Modulo;</li> <li>Creating your own function;</li> <li>Pythonic coding;</li> <li>and <code>match</code>.</li> </ul>"},{"location":"2.%20Conditionals/Exercises/problem1/","title":"Deep Thought","text":"<pre><code>\u201cAll right,\u201d said the computer, and settled into silence again. The two men fidgeted. The tension was unbearable.\n\u201cYou\u2019re really not going to like it,\u201d observed Deep Thought.\n\u201cTell us!\u201d\n\u201cAll right,\u201d said Deep Thought. \u201cThe Answer to the Great Question\u2026\u201d\n\u201cYes\u2026!\u201d\n\u201cOf Life, the Universe and Everything\u2026\u201d said Deep Thought.\n\u201cYes\u2026!\u201d\n\u201cIs\u2026\u201d said Deep Thought, and paused.\n\u201cYes\u2026!\u201d\n\u201cIs\u2026\u201d\n\u201cYes\u2026!!!\u2026?\u201d\n\u201cForty-two,\u201d said Deep Thought, with infinite majesty and calm.\u201d\n\n\u2014 The Hitchhiker\u2019s Guide to the Galaxy, Douglas Adams\n</code></pre> <p>In <code>deep.py</code>, implement a program that prompts the user for the answer to the Great Question of Life, the Universe and Everything, outputting <code>Yes</code> if the user inputs <code>42</code> or (case-insensitively) <code>forty-two</code> or <code>forty two</code>. Otherwise output <code>No</code>.</p> Hints <ul> <li>No need to convert the user\u2019s input to an <code>int</code> if you check for equality with <code>\"42\"</code>, a <code>str</code>, rather than <code>42</code>, an <code>int</code>!</li> <li>It\u2019s okay if your output or the user\u2019s wraps onto multiple lines.</li> </ul>"},{"location":"2.%20Conditionals/Exercises/problem1/#before-you-begin","title":"Before You Begin","text":"<p>From the root of your repository execute <code>cd conditionals</code> So your current working directory is ...    <pre><code>/conditionals $:\n</code></pre> Next execute <pre><code>code deep.py\n</code></pre> to make a file called <code>deep.py</code> where you\u2019ll write your program.</p> <p>Success</p> <p>Your program must have a function call <code>deep_thought</code> that takes 1 argument, a string. The function must return a boolean value of <code>True</code> if the argument is equal to <code>\"42\"</code>, case insensitive <code>\"Forty Two\"</code>, or <code>\"forty-two\"</code>, otherwise it returns <code>False</code>. Your <code>main()</code> function should call the function with user input, print the result of that function call to the console.</p>"},{"location":"2.%20Conditionals/Exercises/problem1/#how-to-test","title":"How to Test","text":"<p>Here\u2019s how to test your code manually. At the <code>deep/ $</code> prompt in your terminal: :</p> <ol> <li>Run your program with <code>python deep.py</code>. Type <code>42</code> and press Enter. Your program should output: <pre><code>Yes\n</code></pre></li> <li>Run your program with <code>python deep.py</code>. Type <code>Forty Two</code> and press Enter. Your program should output: <pre><code>Yes\n</code></pre></li> <li>Run your program with <code>python deep.py</code>. Type <code>forty-two</code> and press Enter. Your program should output: <pre><code>Yes\n</code></pre></li> <li>Run your program with <code>python deep.py</code>. Type <code>50</code> and press Enter. Your program should output: <pre><code>No\n</code></pre></li> </ol> <p>You can execute the below to check your code using <code>pytest</code> from the root directory.</p> <pre><code>pytest .\\tests\\conditionals\\test_deep.py\n</code></pre> <p>A green output from running the test means it was successful. A red output means there is a bug in your code that you need to fix.</p>"},{"location":"2.%20Conditionals/Exercises/problem1/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"2.%20Conditionals/Exercises/problem1/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"2.%20Conditionals/Exercises/problem1/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/datatypes $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"your message here\"\n</code></pre> Commit all changes in the REPO with the comment \u201cyour message here\u201c note: If the file is not complete, adjust the comment to describes what is being committed</p> <p>Note</p> <p>Remember to replace \"your message here\" with a meaningful commit message that describes your changes.</p> <p><pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"2.%20Conditionals/Exercises/problem2/","title":"Home Federal Savings Bank","text":"<p>Watch: Season 7, Episode 24 Seinfeld</p> <p>In season 7, episode 24 of Seinfeld, Kramer visits a bank that promises to give <code>$100</code> to anyone who isn\u2019t greeted with a \u201chello.\u201d Kramer is instead greeted with a \u201chey,\u201d which he insists isn\u2019t a \u201chello,\u201d and so he asks for <code>$100</code>. The bank\u2019s manager proposes a compromise: \u201cYou got a greeting that starts with an \u2018h,\u2019 how does <code>$20</code> sound?\u201d Kramer accepts.</p> <p>In a file called <code>bank.py</code>, implement a program that prompts the user for a greeting. If the greeting starts with \u201chello\u201d, output <code>$0</code>. If the greeting starts with an \u201ch\u201d (but not \u201chello\u201d), output <code>$20</code>. Otherwise, output <code>$100</code>. Ignore any leading whitespace in the user\u2019s greeting, and treat the user\u2019s greeting case-insensitively.</p> Hints <ul> <li>Recall that a str comes with quite a few methods, per https://docs.python.org/3/library/stdtypes.html#string-methods.</li> <li>Be sure to give $0 not only for \u201chello\u201d but also \u201chello there\u201d, \u201chello, Newman\u201d, and the like.</li> </ul>"},{"location":"2.%20Conditionals/Exercises/problem2/#before-you-begin","title":"Before You Begin","text":"<p>From the root of your repository execute cd <code>conditionals</code> So your current working directory is ... <pre><code>/conditionals $:\n</code></pre> Next execute <pre><code>code bank.py\n</code></pre> to make a file called bank.py where you\u2019ll write your program.</p> <p>Success</p> <p>Your program must have a function call <code>greeting</code> that takes a string as an argument and returns an integer. Your <code>main</code> function must call this function and print the result.</p>"},{"location":"2.%20Conditionals/Exercises/problem2/#how-to-test","title":"How to Test","text":"<p>Here\u2019s how to test your code manually. At the bank/ $ prompt in your terminal:</p> <p>Run your program with python bank.py. Type <code>Hello</code> and press Enter. Your program should output: <pre><code>$0\n</code></pre> Run your program with python bank.py. Type <code>Hello, Newman</code> and press Enter. Your program should output: <pre><code>$0\n</code></pre> Run your program with python bank.py. Type <code>How you doing?</code> and press Enter. Your program should output: <pre><code>$20\n</code></pre> Run your program with python bank.py. Type<code>What's happening?</code> and press Enter. Your program should output: <pre><code>$100\n</code></pre></p>"},{"location":"2.%20Conditionals/Exercises/problem2/#pytest","title":"Pytest","text":"<p>You can execute the below to check your code using <code>pytest</code> from the root directory.</p> <pre><code>pytest .\\tests\\conditionals\\test_bank.py\n</code></pre> <p>A green output from running the test means it was successful. A red output means there is a bug in your code that you need to fix.</p>"},{"location":"2.%20Conditionals/Exercises/problem2/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"2.%20Conditionals/Exercises/problem2/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"2.%20Conditionals/Exercises/problem2/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/datatypes $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"your message here\"\n</code></pre> Commit all changes in the REPO with the comment \u201cyour message here\u201c note: If the file is not complete, adjust the comment to describes what is being committed</p> <p>Note</p> <p>Remember to replace \"your message here\" with a meaningful commit message that describes your changes.</p> <p><pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"2.%20Conditionals/Exercises/problem3/","title":"File Extensions","text":"<p>Even though Windows and macOS sometimes hide them, most files have file extensions, a suffix that starts with a period (<code>.</code>) at the end of their name. For instance, file names for GIFs end with <code>.gif</code>, and file names for JPEGs end with <code>.jpg</code> or <code>.jpeg</code>. When you double-click on a file to open it, your computer uses its file extension to determine which program to launch.</p> <p>Web browsers, by contrast, rely on media types, formerly known as MIME types, to determine how to display files that live on the web. When you download a file from a web server, that server sends an HTTP header, along with the file itself, indicating the file\u2019s media type. For instance, the media type for a GIF is <code>image/gif</code>, and the media type for a JPEG is <code>image/jpeg</code>. To determine the media type for a file, a web server typically looks at the file\u2019s extension, mapping one to the other.</p> <p>See MIME types for common types.</p> <p>In a file called extensions.py, implement a program that prompts the user for the name of a file and then outputs that file\u2019s media type if the file\u2019s name ends, case-insensitively, in any of these suffixes: <pre><code>.gif .jpg .jpeg .png .pdf .txt .zip \n</code></pre> If the file\u2019s name ends with some other suffix or has no suffix at all, output <code>application/octet-stream</code> instead, which is a common default.</p> Hints <ul> <li>Recall that a <code>str</code> comes with quite a few methods, per string-methods.</li> </ul>"},{"location":"2.%20Conditionals/Exercises/problem3/#before-you-begin","title":"Before You Begin","text":"<p>From the root of your repository execute cd <code>conditionals</code> So your current working directory is ... <pre><code>/conditionals $:\n</code></pre> Next execute <pre><code>code extensions.py\n</code></pre> to make a file called <code>extensions.py</code> where you\u2019ll write your program.</p> <p>Success</p> <p>Your program must have a function called <code>extension</code> that takes a string argument and returns a string representing the media type. Your <code>main</code> function must call this <code>extension</code> function with the user\u2019s input and print the result.</p>"},{"location":"2.%20Conditionals/Exercises/problem3/#how-to-test","title":"How to Test","text":"<p>Here\u2019s how to test your code manually:</p> <p>Run your program with <code>python extensions.py</code>. Type <code>happy.jpg</code> and press Enter. Your program should output: <pre><code>image/jpeg\n</code></pre> Run your program with <code>python extensions.py</code>. Type <code>document.pdf</code> and press Enter. Your program should output: <pre><code>application/pdf\n</code></pre></p> <p>Be sure to test each of the other file formats, vary the casing of your input, and \u201caccidentally\u201d add spaces on either side of your input before pressing enter. Your program should behave as expected, case- and space-insensitively.</p>"},{"location":"2.%20Conditionals/Exercises/problem3/#pytest","title":"Pytest","text":"<p>You can execute the below to check your code using <code>pytest</code> from the root directory.</p> <pre><code>pytest .\\tests\\conditionals\\test_extensions.py\n</code></pre> <p>A green output from running the test means it was successful. A red output means there is a bug in your code that you need to fix.</p>"},{"location":"2.%20Conditionals/Exercises/problem3/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"2.%20Conditionals/Exercises/problem3/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"2.%20Conditionals/Exercises/problem3/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/datatypes $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"your message here\"\n</code></pre> Commit all changes in the REPO with the comment \u201cyour message here\u201c note: If the file is not complete, adjust the comment to describes what is being committed</p> <p>Note</p> <p>Remember to replace \"your message here\" with a meaningful commit message that describes your changes.</p> <p><pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"2.%20Conditionals/Exercises/problem4/","title":"Math Interpreter","text":"<p>Python already supports math, whereby you can write code to add, subtract, multiply, or divide values and even variables. But let\u2019s write a program that enables users to do math, even without knowing Python.</p> <p>In a file called <code>interpreter.py</code>, implement a program that prompts the user for an arithmetic expression and then calculates and outputs the result as a floating-point value formatted to one decimal place. Assume that the user\u2019s input will be formatted as <code>x</code> <code>y</code> <code>z</code>, with one space between <code>x</code> and <code>y</code> and one space between <code>y</code> and <code>z</code>, wherein:</p> <ul> <li><code>x</code> is an integer</li> <li><code>y</code> is <code>+</code>, <code>-</code>, <code>*</code>, or <code>/</code></li> <li><code>z</code> is an integer</li> </ul> <p>For instance, if the user inputs <code>1 + 1</code>, your program should output <code>2.0</code>. Assume that, if <code>y</code> is <code>/</code>, then <code>z</code> will not be <code>0</code>.</p> <p>Note that, just as <code>python</code> itself is an interpreter for Python, so will your <code>interpreter.py</code> be an interpreter for math!</p> Hints <ul> <li>Recall that a <code>str</code> comes with quite a few methods, per https://docs.python.org/3/library/stdtypes.html#string-methods, including <code>split</code>, which separates a <code>str</code> into a sequence of values, all of which can be assigned to variables at once. </li> </ul> <p>For instance, if <code>expression</code> is a <code>str</code> like <code>1 + 1</code>, then <pre><code>x, y, z = expression.split(\" \")\n</code></pre> will assign <code>1</code> to <code>x</code>, <code>+</code> to <code>y</code>, and <code>1</code> to <code>z</code>.</p>"},{"location":"2.%20Conditionals/Exercises/problem4/#before-you-begin","title":"Before You Begin","text":"<p>From the root of your repository execute <code>cd conditionals</code> So your current working directory is ...    <pre><code>/conditionals $:\n</code></pre> Next execute <pre><code>code interpreter.py\n</code></pre> to make a file called <code>interpreter.py</code> where you\u2019ll write your program.</p> <p>Success</p> <p>Your program must have a function called <code>calculate</code> that takes 3 parameters: <code>x</code>, <code>y</code>, and <code>z</code>. These parameters will be strings representing numbers or mathematical operators. For example, if the user types <code>1 + 1</code>, then <code>x</code> would be <code>\"1\"</code>, <code>y</code> would be <code>\"+\"</code>, and <code>z</code> would be <code>\"1\"</code>. It should return the result of the calculation as a float.</p>"},{"location":"2.%20Conditionals/Exercises/problem4/#how-to-test","title":"How to Test","text":"<p>Here\u2019s how to test your code manually. At the <code>conditionals/ $</code> prompt in your terminal: :</p> <ol> <li>Run your program with <code>python interpreter.py</code>. Type <code>1 + 1</code> and press Enter. Your program should output: <pre><code>2.0\n</code></pre></li> <li>Run your program with <code>python interpreter.py</code>. Type <code>2 - 3</code> and press Enter. Your program should output: <pre><code>-1.0\n</code></pre></li> <li>Run your program with <code>python interpreter.py</code>. Type <code>2 * 2</code> and press Enter. Your program should output: <pre><code>4.0\n</code></pre></li> <li>Run your program with <code>python interpreter.py</code>. Type <code>50 / 5</code> and press Enter. Your program should output: <pre><code>10.0\n</code></pre></li> </ol>"},{"location":"2.%20Conditionals/Exercises/problem4/#pytest","title":"Pytest","text":"<p>You can execute the below to check your code using <code>pytest</code> from the root directory.</p> <pre><code>pytest .\\tests\\conditionals\\test_interpreter.py\n</code></pre> <p>A green output from running the test means it was successful. A red output means there is a bug in your code that you need to fix.</p>"},{"location":"2.%20Conditionals/Exercises/problem4/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"2.%20Conditionals/Exercises/problem4/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"2.%20Conditionals/Exercises/problem4/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/datatypes $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"your message here\"\n</code></pre> Commit all changes in the REPO with the comment \u201cyour message here\u201c note: If the file is not complete, adjust the comment to describes what is being committed</p> <p>Note</p> <p>Remember to replace \"your message here\" with a meaningful commit message that describes your changes.</p> <p><pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"2.%20Conditionals/Exercises/problem5/","title":"Meal Time","text":"<p>Suppose that you\u2019re in a country where it\u2019s customary to eat breakfast between 7:00 and 8:00, lunch between 12:00 and 13:00, and dinner between 18:00 and 19:00. Wouldn\u2019t it be nice if you had a program that could tell you what to eat when?</p> <p>In <code>meal.py</code>, implement a program that prompts the user for a time and outputs whether it\u2019s <code>breakfast time</code>, <code>lunch time</code>, or <code>dinner time</code>. If it\u2019s not time for a meal, don\u2019t output anything at all. Assume that the user\u2019s input will be formatted in 24-hour time as <code>#:##</code> or <code>##:##</code>. And assume that each meal\u2019s time range is inclusive. For instance, whether it\u2019s 7:00, 7:01, 7:59, or 8:00, or anytime in between, it\u2019s time for breakfast.</p> <p>Structure your program per the below, wherein <code>convert</code> is a function (that can be called by <code>main</code>) that converts <code>time</code>, a <code>str</code> in 24-hour format, to the corresponding number of hours as a <code>float</code>. For instance, given a <code>time</code> like <code>\"7:30\"</code> (i.e., 7 hours and 30 minutes), <code>convert</code> should return <code>7.5</code> (i.e., 7.5 hours). <pre><code>def main():\n    ...\n\n\ndef convert(time):\n    ...\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p> Hints <ul> <li> <p>Recall that a <code>str</code> comes with quite a few methods, per https://docs.python.org/3/library/stdtypes.html#string-methods, including <code>split</code>, which separates a <code>str</code> into a sequence of values, all of which can be assigned to variables at once. For instance, if <code>time</code> is a <code>str</code> like <code>\"7:30\"</code>, then <pre><code>    hours, minutes = time.split(\":\")\n</code></pre> will assign <code>\"7\"</code> to <code>hours</code> and <code>\"30\"</code> to <code>minutes</code>.</p> </li> <li> <p>Keep in mind that there are 60 minutes in 1 hour.</p> </li> </ul>"},{"location":"2.%20Conditionals/Exercises/problem5/#before-you-begin","title":"Before You Begin","text":"<p>From the root of your repository execute <code>cd conditionals</code> So your current working directory is ...    <pre><code>/conditionals $:\n</code></pre> Next execute <pre><code>code meal.py\n</code></pre> to make a file called <code>meal.py</code> where you\u2019ll write your program.</p>"},{"location":"2.%20Conditionals/Exercises/problem5/#how-to-test","title":"How to Test","text":"<p>Here\u2019s how to test your code manually. At the <code>meal/ $</code> prompt in your terminal: :</p> <ol> <li>Run your program with <code>python meal.py</code>. Type <code>7:00</code> and press Enter. Your program should output:  <pre><code>breakfast time\n</code></pre></li> <li>Run your program with <code>python meal.py</code>. Type <code>7:30</code> and press Enter. Your program should output: <pre><code>breakfast time\n</code></pre></li> <li>Run your program with <code>python meal.py</code>. Type <code>12:42</code> and press Enter. Your program should output: <pre><code>lunch time\n</code></pre></li> <li>Run your program with <code>python meal.py</code>. Type <code>18:32</code> and press Enter. Your program should output: <pre><code>dinner time\n</code></pre></li> <li>Run your program with <code>python meal.py</code>. Type <code>11:11</code> and press Enter. Your program should output: <pre><code>nothing\n</code></pre></li> </ol>"},{"location":"2.%20Conditionals/Exercises/problem5/#pytest","title":"Pytest","text":"<p>You can execute the below to check your code using <code>pytest</code> from the root directory.</p> <pre><code>pytest .\\tests\\conditionals\\test_meal.py\n</code></pre> <p>A green output from running the test means it was successful. A red output means there is a bug in your code that you need to fix.</p>"},{"location":"2.%20Conditionals/Exercises/problem5/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"2.%20Conditionals/Exercises/problem5/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"2.%20Conditionals/Exercises/problem5/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/conditionals/meal $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"Upload completed meal.py\"\n</code></pre> Commit all changes in the REPO with the comment \u201cUpload completed meal.py\u201c note: If the file is not complete, adjust the comment to describes what is being committed <pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"3.%20Loops/","title":"Loops","text":""},{"location":"3.%20Loops/#video","title":"Video","text":"<p>  (1:20hr)</p>"},{"location":"3.%20Loops/#loops_1","title":"Loops","text":"<ul> <li>Essentially, <code>loops</code> are a way to do something over and over again.</li> <li>Begin by typing <code>code cat.py</code> in the terminal window.</li> <li> <p>In the text editor, begin with the following code: <pre><code>print(\"meow\")\nprint(\"meow\")\nprint(\"meow\")\n</code></pre> Running this code by typing <code>python cat.py</code>, you\u2019ll notice that the program meows three times.</p> </li> <li> <p>In developing as a programmer, you want to consider how one could improve areas of one\u2019s code where one types the same thing over and over again. Imagine where one might want to \u201cmeow\u201d 500 times. Would it be logical to type that same expression of <code>print(\"meow\")</code> over and over again? Loops enable you to create a block of code that executes over and over again.</p> </li> </ul>"},{"location":"3.%20Loops/#while-loops","title":"While Loops","text":"<ul> <li>The while loop is nearly universal throughout all coding languages.</li> <li>Such a loop will repeat a block of code over and over again.</li> <li> <p>In the text editor window, edit your code as follows: <pre><code>i = 3\nwhile i != 0:\n    print(\"meow\")\n</code></pre> Notice how even though this code will execute <code>print(\"meow\")</code> multiple times, it will never stop! It will loop forever. <code>while</code> loops work by repeatedly asking if the condition of the loop has been fulfilled. In this case, the compiler is asking \u201cdoes i not equal zero?\u201d When you get stuck in a loop that executes forever, you can press Ctrl+C on your keyboard to break out of the loop.</p> </li> <li> <p>To fix this loop that lasts forever, we can edit our code as follows <pre><code>i = 3\nwhile i != 0:\n    print(\"meow\")\n    i = i - 1\n</code></pre> Notice that now our code executes properly, reducing <code>i</code> by <code>1</code> for each \u201citeration\u201d through the loop. This term iteration has special significance within coding. By iteration, we mean one cycle through the loop. The first iteration is the \u201c0th\u201d iteration through the loop. The second is the \u201c1st\u201d iteration. In programming we count starting with 0, then 1, then 2.</p> </li> <li> <p>We can further improve our code as follows: <pre><code>i = 1\nwhile i &lt;= 3:\n    print(\"meow\")\n    i = i + 1\n</code></pre> Notice that when we code <code>i = i + 1</code> we assign the value of <code>i</code> from the right to the left. Above, we are starting <code>i</code> at one, like most humans count (1, 2, 3). If you execute the code above, you\u2019ll see it meows three times. It\u2019s best practice in programming to begin counting with zero.</p> </li> <li> <p>We can improve our code, to start counting with zero: <pre><code>i = 0\nwhile i &lt; 3:\n    print(\"meow\")\n    i += 1\n</code></pre> Notice how changing the operator to <code>i &lt; 3</code> allows our code to function as intended. We begin by counting with 0 and it iterates through our loop three times, producing three meows. Also, notice how <code>i += 1</code> is the same as saying <code>i = i + 1</code>.</p> </li> </ul> <p>There is one last improvement we can make to the code. That is to use descriptive variable names. In this case, we could use the name <code>number_of_meows</code> instead of <code>i</code>. This makes it clear what the variable is used for. This example is trivial, but as programs get more complex, descriptive variable names become increasingly important. <pre><code>number_of_meows = 0\nwhile number_of_meows &lt; 3:\n    print(\"meow\")\n    number_of_meows += 1\n</code></pre></p> <p>Our code at this point is illustrated as follows:</p> <p><pre><code>flowchart TD\n    id1([Start])\n    id2([Stop])\n\n    id1 --&gt; id3[i = 0]\n    id3 --&gt; id4{i &lt; 3}\n    id4 -- True --&gt; id5[\"meow\"]\n    id5 --&gt; id6[i += 1]\n    id6 --&gt; id4\n    id4 -- False --&gt; id2</code></pre> Notice how our loop counts <code>i</code> up to, but not through <code>3</code>.</p>"},{"location":"3.%20Loops/#for-loops","title":"For Loops","text":"<ul> <li>A <code>for</code> loop is a different type of loop.</li> <li>To best understand a <code>for</code> loop, it\u2019s best to begin by talking about a new variable type called a <code>list</code> in Python. As in other areas of our lives, we can have a grocery list, a to-do list, etc.</li> <li> <p>A <code>for</code> loop iterates through a <code>list</code> of items. For example, in the text editor window, modify your <code>cat.py</code> code as follows: <pre><code>for i in [0, 1, 2]:\n    print(\"meow\")\n</code></pre> Notice how clean this code is compared to your previous <code>while</code> loop code. In this code, <code>i</code> begins with <code>0</code>, meows, <code>i</code> is assigned <code>1</code>, meows, and, finally, <code>i</code> is assigned <code>2</code>, meows, and then ends.</p> </li> <li> <p>While this code accomplishes what we want, there are some possibilities for improving our code for extreme cases. At first glance, our code looks great. However, what if you wanted to iterate up to a million? It\u2019s best to create code that can work with such extreme cases. Accordingly, we can improve our code as follows: <pre><code>for i in range(3):\n    print(\"meow\")\n</code></pre> Notice how <code>range(3)</code> provides back three values (<code>0</code>, <code>1</code>, and <code>2</code>) automatically. This code will execute and produce the intended effect, meowing three times.</p> </li> <li> <p>Our code can be further improved. Notice how we never use <code>i</code> explicitly in our code. That is, while Python needs the <code>i</code> as a place to store the number of the iteration of the loop, we never use it for any other purpose. In Python, if such a variable does not have any other significance in our code, we can simply represent this variable as a single underscore <code>_</code>. Therefore, you can modify your code as follows: <pre><code>for _ in range(3):\n    print(\"meow\")\n</code></pre> Notice how changing the <code>i</code> to <code>_</code> has zero impact on the functioning of our program.</p> </li> <li> <p>Our code can be further improved. To stretch your mind to the possibilities within Python, consider the following code: <pre><code>print(\"meow\" * 3)\n</code></pre> Notice how it will meow three times, but the program will produce <code>meowmeowmeow</code> as the result. Consider: How could you create a line break at the end of each meow?</p> </li> <li> <p>Indeed, you can edit your code as follows: <pre><code>print(\"meow\\n\" * 3, end=\"\")\n</code></pre> Notice how this code produces three meows, each on a separate line. By adding <code>end=\"\"</code> and the <code>\\n</code> we tell the compiler to add a line break at the end of each meow.</p> </li> </ul>"},{"location":"3.%20Loops/#improving-with-user-input","title":"Improving with User Input","text":"<ul> <li>Perhaps we want to get input from our user. We can use loops as a way of validating the input of the user.</li> <li>A common paradigm within Python is to use a <code>while</code> loop to validate the input of the user.</li> <li>For example, let\u2019s try prompting the user for a number greater than or equal 0: <pre><code>while True:\n    n = int(input(\"What's n? \"))\nif n &lt; 0:\n    continue\nelse:\n    break\n</code></pre> Notice that we\u2019ve introduced two new keywords in Python, <code>continue</code> and <code>break</code>. <code>continue</code> explicitly tells Python to go to the next iteration of a loop. <code>break</code>, on the other hand, tells Python to \u201cbreak out\u201d of a loop early, before it has finished all of its iterations. In this case, we\u2019ll <code>continue</code> to the next iteration of the loop when n is less than 0\u2014ultimately reprompting the user with \u201cWhat\u2019s n?\u201d. If though, <code>n</code> is greater than or equal to 0, we\u2019ll <code>break</code> out of the loop and allow the rest of our program to run.</li> <li> <p>It turns out that the <code>continue</code> keyword is redundant in this case. We can improve our code as follows: <pre><code>while True:\n    n = int(input(\"What's n? \"))\n    if n &gt; 0:\n        break\n\nfor _ in range(n):\n    print(\"meow\")\n</code></pre> Notice how this while loop will always run (forever) until <code>n</code> is greater than <code>0</code>. When <code>n</code> is greater than <code>0</code>, the loop breaks.</p> </li> <li> <p>Bringing in our prior learning, we can use functions to further to improve our code: <pre><code>def main():\n    number = get_number()\n    meow(number)\n\n\ndef get_number():\n    while True:\n        n = int(input(\"What's n? \"))\n        if n &gt; 0:\n            break\n    return n\n\n\ndef meow(n):\n    for _ in range(n):\n        print(\"meow\")\n</code></pre> Notice how not only did we change your code to operate in multiple functions, but we also used a <code>return</code> statement to <code>return</code> the value of <code>n</code> back to the <code>main</code> function.</p> </li> </ul>"},{"location":"3.%20Loops/#more-about-lists","title":"More About Lists","text":"<ul> <li>Consider the world of Hogwarts from the famed Harry Potter universe.</li> <li>In the terminal, type <code>code hogwarts.py</code>.</li> <li> <p>In the text editor, code as follows: <pre><code>students = [\"Hermoine\", \"Harry\", \"Ron\"]\n\nprint(students[0])\nprint(students[1])\nprint(students[2])\n</code></pre> Notice how we have a <code>list</code> of students with their names as above. We then print the student who is at the 0th location, \u201cHermoine\u201d. Each of the other students are printed as well.</p> </li> <li> <p>Just as we illustrated previously, we can use a loop to iterate over the list. You can improve your code as follows: <pre><code>students = [\"Hermoine\", \"Harry\", \"Ron\"]\n\nfor student in students:\n    print(student)\n</code></pre> Notice that for each <code>student</code> in the <code>students</code> list, it will print the student as intended. You might wonder why we did not use the <code>_</code> designation as discussed prior. We choose not to do this because <code>student</code> is explicitly used in our code.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of lists.</p> </li> </ul>"},{"location":"3.%20Loops/#length","title":"Length","text":"<ul> <li>We can utilise len as a way of checking the length of the list called students.</li> <li> <p>Imagine that you don\u2019t simply want to print the name of the student, but also their position in the list. To accomplish this, you can edit your code as follows: <pre><code>students = [\"Hermoine\", \"Harry\", \"Ron\"]\n\nfor i in range(len(students)):\n    print(i + 1, students[i])\n</code></pre> Notice how executing this code results in not only getting the position of each student plus one using i + 1, but also prints the name of each student. len allow you to dynamically see how long the list of the students is regardless how much it grows.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of len.</p> </li> </ul>"},{"location":"3.%20Loops/#dictionaries","title":"Dictionaries","text":"<ul> <li>dicts or dictionaries is a data structure that allows you to associate keys with values.</li> <li>Where a list is a list of multiple values, a dict associates a key with a value.</li> <li>Considering the houses of Hogwarts, we might assign specific students to specific houses.</li> </ul> Hermoine Harry Ron Draco Gryffindor Gryffindor Gryffindor Slytherin <ul> <li> <p>We could use lists alone to accomplish this: <pre><code>students = [\"Hermoine\", \"Harry\", \"Ron\", \"Draco\"]\nhouses = [\"Gryffindor\", \"Gryffindor\", \"Griffindor\", \"Slytherin\"]\n</code></pre> Notice that we could promise that we will always keep these lists in order. The individual at the first position of students is associated with the house at the first position of the houses list, and so on. However, this can become quite cumbersome as our lists grow!</p> </li> <li> <p>We can better our code using a dict as follows: <pre><code>students = {\n    \"Hermoine\": \"Gryffindor\",\n    \"Harry\": \"Gryffindor\",\n    \"Ron\": \"Gryffindor\",\n    \"Draco\": \"Slytherin\",\n}\nprint(students[\"Hermoine\"])\nprint(students[\"Harry\"])\nprint(students[\"Ron\"])\nprint(students[\"Draco\"])\n</code></pre> Notice how we use <code>{}</code> curly braces to create a dictionary. Where lists use numbers to iterate through the list, dicts allow us to use words.</p> </li> <li> <p>Run your code and make sure your output is as follows: <pre><code>$ python hogwarts.py\nGryffindor\nGryffindor\nGryffindor\nSlytherin\n</code></pre> We can improve our code as follows: <pre><code>students = {\n    \"Hermoine\": \"Gryffindor\",\n    \"Harry\": \"Gryffindor\",\n    \"Ron\": \"Gryffindor\",\n    \"Draco\": \"Slytherin\",\n}\nfor student in students:\n    print(student)\n</code></pre> Notice how executing this code, the for loop will only iterate through all the keys, resulting in a list of the names of the students. How could we print out both values and keys?</p> </li> <li> <p>Modify your code as follows: <pre><code>students = {\n    \"Hermoine\": \"Gryffindor\",\n    \"Harry\": \"Gryffindor\",\n    \"Ron\": \"Gryffindor\",\n    \"Draco\": \"Slytherin\",\n}\nfor student in students:\n    print(student, students[student])\n</code></pre> Notice how students[student] will go to each student\u2019s key and find the value of the their house. Execute your code and you\u2019ll notice how the output is a bit messy.</p> </li> <li> <p>We can clean up the print function by improving our code as follows: <pre><code>students = {\n    \"Hermoine\": \"Gryffindor\",\n    \"Harry\": \"Gryffindor\",\n    \"Ron\": \"Gryffindor\",\n    \"Draco\": \"Slytherin\",\n}\n\nfor student in students:\n    print(student, students[student], sep=\", \")\n</code></pre> Notice how this creates a clean separation of a <code>,</code> between each item printed.</p> </li> <li> <p>If you execute python hogwarts.py, you should see the following: <pre><code>$ python hogwarts.py\nHermoine, Gryffindor\nHarry, Gryffindor\nRon, Gryffindor\nDraco, Slytherin\n</code></pre></p> </li> <li>What if we have more information about our students? How could we associate more data with each of the students?</li> </ul> Name House Patronus 0 Hermione Gryffindor Otter 1 Harry Gryffindor Stag 2 Ron Gryffindor Jack Russell terrier 3 Draco Slytherin None <ul> <li> <p>You can imagine wanting to have lots of data associated multiple things with one key. Enhance your code as follows: <pre><code>students = [\n    {\"name\": \"Hermoine\", \"house\": \"Gryffindor\", \"patronus\": \"Otter\"},\n    {\"name\": \"Harry\", \"house\": \"Gryffindor\", \"patronus\": \"Stag\"},\n    {\"name\": \"Ron\", \"house\": \"Gryffindor\", \"patronus\": \"Jack Russell terrier\"},\n    {\"name\": \"Draco\", \"house\": \"Slytherin\", \"patronus\": None},\n]\n</code></pre> Notice how this code creates a list of dicts. The list called students has four dicts within it: One for each student. Also, notice that Python has a special None designation where there is no value associated with a key.</p> </li> <li> <p>Now, you have access to a whole host of interesting data about these students. Now, further modify you code as follows: <pre><code>students = [\n    {\"name\": \"Hermoine\", \"house\": \"Gryffindor\", \"patronus\": \"Otter\"},\n    {\"name\": \"Harry\", \"house\": \"Gryffindor\", \"patronus\": \"Stag\"},\n    {\"name\": \"Ron\", \"house\": \"Gryffindor\", \"patronus\": \"Jack Russell terrier\"},\n    {\"name\": \"Draco\", \"house\": \"Slytherin\", \"patronus\": None},\n]\n\nfor student in students:\n    print(student[\"name\"], student[\"house\"], student[\"patronus\"], sep=\", \")\n</code></pre> Notice how the for loop will iterate through each of the dicts inside the list called students.</p> </li> <li> <p>You can learn more in Python\u2019s Documentation of dicts.</p> </li> </ul>"},{"location":"3.%20Loops/#mario","title":"Mario","text":"<ul> <li>Remember that the classic game Mario has a hero jumping over bricks. Let\u2019s create a textual representation of this game.</li> </ul> <ul> <li> <p>Begin coding as follows: <pre><code>print(\"#\")\nprint(\"#\")\nprint(\"#\")\n</code></pre> Notice how we are copying and pasting the same code over and over again.</p> </li> <li> <p>Consider how we could better the code as follows: <pre><code>for _ in range(3):\n    print(\"#\")\n</code></pre> Notice how this accomplishes essentially what we want to create.</p> </li> <li> <p>Consider: Could we further abstract for solving more sophisticated problems later with this code? Modify your code as follows: <pre><code>def main():\n    print_column(3)\n\ndef print*column(height):\n    for * in range(height):\n        print(\"#\")\n\nmain()\n</code></pre> Notice how our column can grow as much as we want without any hard coding.</p> </li> <li> <p>Now, let\u2019s try to print a row horizontally. Modify your code as follows: <pre><code>def main():\nprint_row(4)\n\ndef print_row(width):\nprint(\"?\" * width)\n\nmain()\n</code></pre> Notice how we now have code that can create left to right blocks.</p> </li> <li> <p>Examining the slide below, notice how Mario has both rows and columns of blocks.</p> </li> </ul> <p></p> <ul> <li> <p>Consider, how could we implement both rows and columns within our code? Modify your code as follows: <pre><code>def main():\nprint_square(3)\n\ndef print_square(size):\n\n    # For each row in square\n    for i in range(size):\n\n        # For each brick in row\n        for j in range(size):\n\n            #  Print brick\n            print(\"#\", end=\"\")\n\n        # Print blank line\n        print()\n\nmain()\n</code></pre> Notice that we have an outer loop addresses each row in the square. Then, we have an inner loop that prints a brick in each row. Finally, we have a print statement that prints a blank line.</p> </li> <li> <p>We can further abstract away our code:</p> </li> </ul> <pre><code>def main():\n    print_square(3)\n\n\ndef print_square(size):\n    for i in range(size):\n        print_row(size)\n\n\ndef print_row(width):\n    print(\"#\" * width)\n\n\nmain()\n</code></pre>"},{"location":"3.%20Loops/#summing-up","title":"Summing Up","text":"<p>You now have another power in your growing list of your Python abilities. In this lecture we addressed\u2026</p> <ul> <li>Loops</li> <li><code>while</code></li> <li><code>for</code></li> <li><code>len</code></li> <li><code>list</code></li> <li><code>dict</code></li> </ul>"},{"location":"3.%20Loops/Exercises/problem1/","title":"camelCase","text":"<p>  Source: en.wikipedia.org/wiki/Camel_case</p> <p>In some languages, it\u2019s common to use camel case (otherwise known as \u201cmixed case\u201d) for variables\u2019 names when those names comprise multiple words, whereby the first letter of the first word is lowercase but the first letter of each subsequent word is uppercase. For instance, whereas a variable for a user\u2019s name might be called <code>name</code>, a variable for a user\u2019s first name might be called <code>firstName</code>, and a variable for a user\u2019s preferred first name (e.g., nickname) might be called <code>preferredFirstName</code>.</p> <p>Python, by contrast, recommends snake case, whereby words are instead separated by underscores (_), with all letters in lowercase. For instance, those same variables would be called <code>name</code>, <code>first_name</code>, and <code>preferred_first_name</code>, respectively, in Python.</p> <p>In a file called <code>camel.py</code>, implement a program that prompts the user for the name of a variable in camel case and outputs the corresponding name in snake case. Assume that the user\u2019s input will indeed be in camel case.</p> Hints <ul> <li>Recall that a <code>str</code> comes with quite a few methods, per docs.python.org/3/library/stdtypes.html#string-methods.</li> <li>Much like a <code>list</code>, a <code>str</code> is \u201citerable,\u201d which means you can iterate over each of its characters in a loop. For instance, if <code>s</code> is a <code>str</code>, you could print each of its characters, one at a time, with code like: <pre><code>    for c in s:\n        print(c, end=\"\")\n</code></pre></li> </ul>"},{"location":"3.%20Loops/Exercises/problem1/#before-you-begin","title":"Before You Begin","text":"<p>From the root of your repository execute <code>cd src/2-Loops</code> So your current working directory is ...     <pre><code>/src/2-Loops $:\n</code></pre> Next execute <pre><code>code camel.py\n</code></pre> to make a file called <code>camel.py</code> where you\u2019ll write your program.</p> <p>Success</p> <p>Your program must have a function called <code>camel_to_snake</code> that takes a string as input and returns a new string with all of its camelCase words converted to snake_case. Your <code>main</code> function must call this function with a user input string and print the result.</p>"},{"location":"3.%20Loops/Exercises/problem1/#how-to-test","title":"How to Test","text":"<p>Here\u2019s how to test your code manually:</p> <ol> <li>Run your program with <code>python camel.py</code>. Type <code>name</code> and press Enter. Your program should output: <pre><code>name\n</code></pre></li> <li>Run your program with <code>python camel.py</code>. Type <code>firstName</code> and press Enter. Your program should output: <pre><code>first_name\n</code></pre></li> <li>Run your program with <code>python camel.py</code>. Type <code>preferredFirstName</code> and press Enter. Your program should output <pre><code>preferred_first_name\n</code></pre></li> </ol>"},{"location":"3.%20Loops/Exercises/problem1/#pytest","title":"Pytest","text":"<p>You can execute the below to check your code using <code>pytest</code> from the root directory.</p> <pre><code>pytest .\\tests\\loops\\test_camel.py\n</code></pre> <p>A green output from running the test means it was successful. A red output means there is a bug in your code that you need to fix.</p>"},{"location":"3.%20Loops/Exercises/problem1/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"3.%20Loops/Exercises/problem1/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"3.%20Loops/Exercises/problem1/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/datatypes $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"your message here\"\n</code></pre> Commit all changes in the REPO with the comment \u201cyour message here\u201c note: If the file is not complete, adjust the comment to describes what is being committed</p> <p>Note</p> <p>Remember to replace \"your message here\" with a meaningful commit message that describes your changes.</p> <p><pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"3.%20Loops/Exercises/problem2/","title":"Ginger Beer Machine","text":"<p>Suppose that a machine sells bottles of Ginger Beer for 50 cents and only accepts coins in these denominations: 25 cents, 10 cents, and 5 cents.</p> <p>In a file called <code>ginger_beer_machine.py</code>, implement a program that prompts the user to insert a coin, one at a time, each time informing the user of the amount due. Once the user has inputted at least 50 cents, output how many cents in change the user is owed. Assume that the user will only input integers, and ignore any integer that isn\u2019t an accepted denomination.</p> <p>Note</p> <p>The commandline supports tab completion. You can use tab to complete commands or filenames after typing the first few characters of a command or filename.</p>"},{"location":"3.%20Loops/Exercises/problem2/#before-you-begin","title":"Before You Begin","text":"<p>From the root of your repository execute <code>cd src/loops</code> So your current working directory is ...       <pre><code>src/loops $:\n</code></pre> Next execute <pre><code>code ginger_beer_machine.py\n</code></pre> to make a file called <code>ginger_beer_machine.py</code> where you\u2019ll write your program.</p>"},{"location":"3.%20Loops/Exercises/problem2/#how-to-test","title":"How to Test","text":"<p>Here\u2019s how to test your code manually:</p> <ol> <li> <p>Run your program with <code>python ginger_beer_machine.py</code>. At your <code>Insert Coin</code>: prompt, type <code>25</code> and press Enter. Your program should output: <pre><code>Amount Due: 25\n</code></pre> and continue prompting the user for coins.</p> </li> <li> <p>Run your program with <code>python ginger_beer_machine.py</code>. At your <code>Insert Coin</code>: prompt, type <code>10</code> and press Enter. Your program should output: <pre><code>Amount Due: 40\n</code></pre> and continue prompting the user for coins.</p> </li> <li> <p>Run your program with <code>python ginger_beer_machine.py</code>. At your <code>Insert Coin</code>: prompt, type <code>5</code> and press Enter. Your program should output: <pre><code>Amount Due: 45\n</code></pre> and continue prompting the user for coins.</p> </li> <li> <p>Run your program with <code>python ginger_beer_machine.py</code>. At your <code>Insert Coin</code>: prompt, type <code>30</code> and press Enter. Your program should output: <pre><code>Amount Due: 50\n</code></pre> because the machine doesn\u2019t accept 30-cent coins! Your program should then continue prompting the user for coins.</p> </li> <li> <p>Run your program with <code>python ginger_beer_machine.py</code>. At your <code>Insert Coin</code>: prompt, type <code>25</code> and press Enter, then type <code>25</code> again and press Enter. Your program should halt and display: <pre><code>Change Owed: 0\n</code></pre></p> </li> <li>Run your program with <code>python ginger_beer_machine.py</code>. At your Insert Coin: prompt, type <code>25</code> and press Enter, then type 10 and press Enter. Type <code>25</code> again and press Enter, after which your program should halt and display: <pre><code>Change Owed: 10\n</code></pre></li> </ol>"},{"location":"3.%20Loops/Exercises/problem2/#pytest","title":"Pytest","text":"<p>You can execute the below to check your code using <code>pytest</code> from the root directory.</p> <pre><code>pytest .\\tests\\loops\\test_ginger_beer_machine.py\n</code></pre> <p>A green output from running the test means it was successful. A red output means there is a bug in your code that you need to fix.</p>"},{"location":"3.%20Loops/Exercises/problem2/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"3.%20Loops/Exercises/problem2/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"3.%20Loops/Exercises/problem2/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/datatypes $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"your message here\"\n</code></pre> Commit all changes in the REPO with the comment \u201cyour message here\u201c note: If the file is not complete, adjust the comment to describes what is being committed</p> <p>Note</p> <p>Remember to replace \"your message here\" with a meaningful commit message that describes your changes.</p> <p><pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"3.%20Loops/Exercises/problem3/","title":"Just setting up my twttr","text":"<p>When texting or tweeting, it\u2019s not uncommon to shorten words to save time or space, as by omitting vowels, much like Twitter was originally called twttr. In a file called <code>twttr.py</code>, implement a program that prompts the user for a <code>str</code> of text and then outputs that same text but with all vowels (A, E, I, O, and U) omitted, whether inputted in uppercase or lowercase.</p> Hints <ul> <li>Recall that a <code>str</code> comes with quite a few methods, per docs.python.org/3/library/stdtypes.html#string-methods.</li> <li>Much like a <code>list</code>, a <code>str</code> is \u201citerable,\u201d which means you can iterate over each of its characters in a loop. For instance, if <code>s</code> is a <code>str</code>, you could print each of its characters, one at a time, with code like:</li> </ul> <pre><code>for c in s:\n    print(c, end=\"\")\n</code></pre>"},{"location":"3.%20Loops/Exercises/problem3/#before-you-begin","title":"Before You Begin","text":"<p>From the root of your repository execute <code>cd src/loops</code> So your current working directory is ...       <pre><code>src/loops $:\n</code></pre> Next execute <pre><code>code twttr.py\n</code></pre> to make a file called <code>twttr.py</code> where you\u2019ll write your program.</p>"},{"location":"3.%20Loops/Exercises/problem3/#how-to-test","title":"How to Test","text":"<p>Here\u2019s how to test your code manually:</p> <ol> <li>Run your program with <code>python twttr.py</code>. Type <code>Twitter</code> and press Enter. Your program should output: <pre><code>Twttr   \n</code></pre></li> <li>Run your program with <code>python twttr.py</code>. Type <code>What's your name?</code> and press Enter. Your program should output: <pre><code>Wht's yr nm?\n</code></pre></li> <li>Run your program with <code>python twttr.py</code>. Type <code>CS50</code> and press Enter. Your program should output: <pre><code>CS50\n</code></pre></li> </ol>"},{"location":"3.%20Loops/Exercises/problem3/#pytest","title":"Pytest","text":"<p>You can execute the below to check your code using <code>pytest</code> from the root directory.</p> <pre><code>pytest .\\tests\\loops\\twttr.py\n</code></pre> <p>A green output from running the test means it was successful. A red output means there is a bug in your code that you need to fix.</p>"},{"location":"3.%20Loops/Exercises/problem3/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"3.%20Loops/Exercises/problem3/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"3.%20Loops/Exercises/problem3/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/datatypes $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"your message here\"\n</code></pre> Commit all changes in the REPO with the comment \u201cyour message here\u201c note: If the file is not complete, adjust the comment to describes what is being committed</p> <p>Note</p> <p>Remember to replace \"your message here\" with a meaningful commit message that describes your changes.</p> <p><pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"3.%20Loops/Exercises/problem4/","title":"My Plates","text":"<p>In NSW, home to Killarney Heights High School, it\u2019s possible to request custom license plate for your vehicle, with your choice of letters and numbers instead of random ones. There are few requirements for custom license plates apart from offensive words and profanity.</p> <p>Some countries have requirements like the following:</p> <ul> <li>\"All plates must start with at least two letters.\"</li> <li>\u201cplates may contain a maximum of 6 characters (letters or numbers) and a minimum of 2 characters.\u201d</li> <li>\u201cNumbers cannot be used in the middle of a plate; they must come at the end. For example, AAA222 would be an acceptable plate; AAA22A would not be acceptable. The first number used cannot be a \u20180\u2019.\u201d</li> <li>\u201cNo periods, spaces, or punctuation marks are allowed.\u201d</li> </ul> <p>In <code>plates.py</code>, implement a program that prompts the user for a number plate and then output <code>Valid</code> if meets all of the requirements or <code>Invalid</code> if it does not. Assume that any letters in the user\u2019s input will be uppercase. Structure your program per the below, wherein <code>is_valid</code> returns <code>True</code> if <code>s</code> meets all requirements and <code>False</code> if it does not. Assume that s will be a <code>str</code>. You\u2019re welcome to implement additional functions for <code>is_valid</code> to call (e.g., one function per requirement). <pre><code>def main():\n    plate = input(\"Plate: \")\n    if is_valid(plate):\n        print(\"Valid\")\n    else:\n        print(\"Invalid\")\n\n\ndef is_valid(s):\n    ...\n\n\nmain()\n</code></pre></p> Hints <ul> <li>Recall that a <code>str</code> comes with quite a few methods, per docs.python.org/3/library/stdtypes.html#string-methods.</li> <li>Much like a <code>list</code>, a <code>str</code> is a \u201csequence\u201d (of characters), which means it can be \u201csliced\u201d into shorter strings with syntax like <code>s[i:j]</code>. For instance, if <code>s</code> is <code>\"CS50\"</code>, then <code>s[0:2]</code> would be \"CS\".</li> </ul>"},{"location":"3.%20Loops/Exercises/problem4/#before-you-begin","title":"Before You Begin","text":"<p>From the root of your repository execute <code>cd src/loops</code> So your current working directory is ... <pre><code>src/loops $:\n</code></pre> Next execute <pre><code>code plates.py\n</code></pre> to make a file called <code>plates.py</code> where you\u2019ll write your program.</p>"},{"location":"3.%20Loops/Exercises/problem4/#how-to-test","title":"How to Test","text":"<p>Here\u2019s how to test your code manually:</p> <ol> <li>Run your program with <code>python plates.py</code>. Type <code>CS50</code> and press Enter. Your program should output: <pre><code>Valid\n</code></pre></li> <li>Run your program with <code>python plates.py</code>. Type <code>CS05</code> and press Enter. Your program should output: <pre><code>Invalid\n</code></pre></li> <li>Run your program with <code>python plates.py</code>. Type <code>CS50P</code> and press Enter. Your program should output <pre><code>Invalid\n</code></pre></li> <li>Run your program with <code>python plates.py</code>. Type <code>PI3.14</code> and press Enter. Your program should output <pre><code>Invalid\n</code></pre></li> <li>Run your program with <code>python plates.py</code>. Type <code>H</code> and press Enter. Your program should output <pre><code>Invalid\n</code></pre></li> <li>Run your program with <code>python plates.py</code>. Type <code>OUTATIME</code> and press Enter. Your program should output <pre><code>Invalid\n</code></pre></li> </ol>"},{"location":"3.%20Loops/Exercises/problem4/#pytest","title":"Pytest","text":"<p>You can execute the below to check your code using <code>pytest</code> from the root directory.</p> <pre><code>pytest .\\tests\\loops\\plates.py\n</code></pre> <p>A green output from running the test means it was successful. A red output means there is a bug in your code that you need to fix.</p>"},{"location":"3.%20Loops/Exercises/problem4/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"3.%20Loops/Exercises/problem4/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"3.%20Loops/Exercises/problem4/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/datatypes $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"your message here\"\n</code></pre> Commit all changes in the REPO with the comment \u201cyour message here\u201c note: If the file is not complete, adjust the comment to describes what is being committed</p> <p>Note</p> <p>Remember to replace \"your message here\" with a meaningful commit message that describes your changes.</p> <p><pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"3.%20Loops/Exercises/problem5/","title":"Nutrition Facts","text":"<p>Food Standards Australia and New Zealand offers an online database for over 1600 foods with detailed nutritional information.</p> <p>In a file called <code>nutrition.py</code>, implement a program that prompts consumers users to input a fruit (case-insensitively) and then outputs the number of kilojoules in 100g of that fruit or vegetable, per the table below. Capitalisation aside, assume that users will input fruits exactly as written in the table (e.g., <code>strawberries</code>, not <code>strawberry</code>). Ignore any input that isn\u2019t a fruit.</p> Hints <ul> <li>Rather than use a conditional with 20 Boolean expressions, one for each fruit, better to use a <code>dict</code> to associate a fruit with its calories!</li> <li> <p>If <code>k</code> is a <code>str</code> and <code>d</code> is a <code>dict</code>, you can check whether <code>k</code> is a key in <code>d</code> with code like:</p> <pre><code>if k in d:\n    ...\n</code></pre> </li> <li> <p>Take care to output the fruit\u2019s calories, not calories from fat!</p> </li> </ul>"},{"location":"3.%20Loops/Exercises/problem5/#data","title":"Data","text":"Fruit Calories (Kilojoules per 100g) Apple 227 Apricot 167 Avocado 579 Banana 394 Blackberries 211 Blueberries 194 Cherries 250 Feijoa 176 Leek 136 Mushroom 87 Onion 139 Peas 294 Capsicum 115 Potato 272 Pumpkin 189 Radish 62 Strawberries 108"},{"location":"3.%20Loops/Exercises/problem5/#before-you-begin","title":"Before You Begin","text":"<p>From the root of your repository execute <code>cd src/loops</code> So your current working directory is ... <pre><code>src/loops $:\n</code></pre> Next execute <pre><code>code nutrition.py\n</code></pre> to make a file called <code>nutrition.py</code> where you\u2019ll write your program.</p>"},{"location":"3.%20Loops/Exercises/problem5/#how-to-test","title":"How to Test","text":"<p>Here\u2019s how to test your code manually:</p> <ol> <li>Run your program with <code>python nutrition.py</code>. Type <code>Apple</code> and press Enter. Your program should output: <pre><code>kilojoules: 227\n</code></pre></li> <li>Run your program with <code>python nutrition.py</code>. Type <code>Avocado</code> and press Enter. Your program should output: <pre><code>kilojoules: 579\n</code></pre></li> <li>Run your program with <code>python nutrition.py</code>. Type <code>Cherries</code> and press Enter. Your program should output <pre><code>kilojoules: 250\n</code></pre></li> <li> <p>Run your program with <code>python nutrition.py</code>. Type <code>Tomato</code> and press Enter. Your program should output <code>No data available for this fruit.</code></p> </li> <li> <p>Be sure to try other fruits and vary the casing of your input. Your program should behave as expected, case-insensitively.</p> </li> </ol>"},{"location":"3.%20Loops/Exercises/problem5/#pytest","title":"Pytest","text":"<p>You can execute the below to check your code using <code>pytest</code> from the root directory.</p> <pre><code>pytest .\\tests\\loops\\nutrition.py\n</code></pre> <p>A green output from running the test means it was successful. A red output means there is a bug in your code that you need to fix.</p>"},{"location":"3.%20Loops/Exercises/problem5/#how-to-submit","title":"How to Submit","text":"<p>From github desktop or the command line, commit your changes and push them to your repository.</p>"},{"location":"3.%20Loops/Exercises/problem5/#codespaces","title":"Codespaces","text":"<p>If you are using codespaces, you can commit your changes directly from the Codespace interface. Click on the Source Control icon in the left sidebar, then click on the \"...\" button and select \"Commit to main\". Enter a commit message and click \"Commit\".</p>"},{"location":"3.%20Loops/Exercises/problem5/#codespace-terminal-or-your-local-terminal","title":"Codespace terminal or your local terminal.","text":"<p>Note</p> <p>You will need to have installed <code>git-scm</code> for this to work locally</p> <p>At the <code>/datatypes $</code> prompt in your terminal: <pre><code>git add -A \n</code></pre> Add all changed files in the repository to be committed <pre><code>git commit -m \"your message here\"\n</code></pre> Commit all changes in the REPO with the comment \u201cyour message here\u201c note: If the file is not complete, adjust the comment to describes what is being committed</p> <p>Note</p> <p>Remember to replace \"your message here\" with a meaningful commit message that describes your changes.</p> <p><pre><code>git push \n</code></pre> Push all changes to the repo.</p>"},{"location":"4.%20Pseudocode/","title":"Pseudocode","text":"<ul> <li>Pseudocode is a form of high-level programming language that is used to represent the logic of an algorithm or program without being tied to any specific programming language. </li> <li>It is used as a tool for planning and designing software, as it allows developers to express their ideas in a clear and concise way before writing actual code. </li> <li>The conventions for writing pseudocode for this course are as follows:<ul> <li>Use simple, declarative sentences</li> <li>Avoid using programming-specific syntax or constructs</li> <li>Each instruction should be on its own line</li> <li>Use indentation to indicate the structure of the program</li> <li>The names of any functions or methods should be underlined. (subprocess)</li> <li>Keywords should be in uppercase.</li> </ul> </li> </ul> <p>Note</p> <p>Rarely will you encounter pseudocode in a real-world software development environment, as most developers prefer to write code directly in a specific programming language. However, it can still be useful for planning and communicating ideas with other developers or stakeholders. It is also beneficial while learning to code as it helps to understand the logic behind the program before writing actual code.</p> <ul> <li> <p>The keywords in pseudocode typically come in pairs</p> </li> <li> <p>The keywords are:</p> <ul> <li>BEGIN / END</li> <li>IF / THEN / ELSE / ENDIF</li> <li>WHILE / DO / ENDWHILE</li> <li>FOR / TO / ENDFOR</li> <li>CASEWHERE / OTHERWISE / ENDCASE</li> <li>REPEAT / UNTIL</li> <li>INPUT / OUTPUT</li> <li>GET</li> <li>DISPLAY</li> </ul> </li> </ul>"},{"location":"5.%20Unit_Tests/","title":"Unit Tests","text":""},{"location":"5.%20Unit_Tests/#video","title":"Video","text":"<p> (0:50hr)</p>"},{"location":"5.%20Unit_Tests/#unit-tests_1","title":"Unit Tests","text":"<ul> <li>Up until now, you have been likely testing your own code using <code>print</code> statements.</li> <li>Alternatively, you may have been relying upon CS50 to test your code for you!</li> <li>It\u2019s most common in industry to write code to test your own programs.</li> <li> <p>In your console window, type <code>code calculator.py</code>. Note that you may have previously coded this file in a previous lecture. In the text editor, make sure that your code appears as follows: <pre><code>def main():\n    x = int(input(\"What's x? \"))\n    print(\"x squared is\", square(x))\n\n\ndef square(n):\n    return n * n\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice that you could plausibly test the above code on your own using some obvious numbers such as 2. However, consider why you might want to create a test that ensures that the above code functions appropriately.</p> </li> <li> <p>Following convention, let\u2019s create a new test program by typing <code>code test_calculator.py</code> and modify your code in the text editor as follows: <pre><code>from calculator import square\n\n\ndef main():\n    test_square()\n\n\ndef test_square():\n    if square(2) != 4:\n        print(\"2 squared was not 4\")\n    if square(3) != 9:\n        print(\"3 squared was not 9\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice that we are importing the <code>square</code> function from <code>square.py</code> on the first line of code. By convention, we are creating a function called <code>test_square</code>. Inside that function, we define some conditions to test.</p> </li> <li> <p>In the console window, type <code>python test_calculator.py</code>. You\u2019ll notice that nothing is being outputted. It could be that everything is running fine! Alternatively, it could be that our test function did not discover one of the \u201ccorner cases\u201d that could produce an error.</p> </li> <li>Right now, our code tests two conditions. If we wanted to test many more conditions, our test code could easily become bloated. How could we expand our test capabilities without expanding our test code?</li> </ul>"},{"location":"5.%20Unit_Tests/#assert","title":"<code>assert</code>","text":"<ul> <li> <p>Python\u2019s <code>assert</code> command allows us to tell the compiler that something, some assertion, is true. We can apply this to our test code as follows: <pre><code>from calculator import square\n\n\ndef main():\n    test_square()\n\n\ndef test_square():\n    assert square(2) == 4\n    assert square(3) == 9\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice that we are definitively asserting what <code>square(2)</code> and <code>square(3)</code> should equal. Our code is reduced from four test lines down to two.</p> </li> <li> <p>We can purposely break our calculator code by modifying it as follows: <pre><code>def main():\n    x = int(input(\"What's x? \"))\n    print(\"x squared is\", square(x))\n\n\ndef square(n):\n    return n + n\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice that we have changed the <code>*</code> operator to a <code>+</code> in the <code>square</code> function.</p> </li> <li> <p>Now running <code>python test_square.py</code> in the console window, you will notice that an <code>AssertionError</code> is raised by the compiler. Essentially, this is the compiler telling us that one of our conditions was not met.</p> </li> <li> <p>One of the challenges that we are now facing is that our code could become even more burdensome if we wanted to provide more descriptive error output to our users. Plausibly, we could code as follows: <pre><code>from calculator import square\n\n\ndef main():\n    test_square()\n\n\ndef test_square():\n    try:\n        assert square(2) == 4\n    except AssertionError:\n        print(\"2 squared is not 4\")\n    try:\n        assert square(3) == 9\n    except AssertionError:\n        print(\"3 squared is not 9\")\n    try:\n        assert square(-2) == 4\n    except AssertionError:\n        print(\"-2 squared is not 4\")\n    try:\n        assert square(-3) == 9\n    except AssertionError:\n        print(\"-3 squared is not 9\")\n    try:\n        assert square(0) == 0\n    except AssertionError:\n        print(\"0 squared is not 0\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice that running this code will produce multiple errors. However, it\u2019s not producing all the errors above. This is a good illustration that it\u2019s worth testing multiple cases such that you might catch situations where there are coding mistakes.</p> </li> <li> <p>The above code illustrates a major challenge: How could we make it easier to test your code without dozens of lines of code like the above?</p> </li> <li>You can learn more in Python\u2019s documentation of assert.</li> </ul>"},{"location":"5.%20Unit_Tests/#pytest","title":"<code>pytest</code>","text":"<ul> <li><code>pytest</code> is a third-party library that allows you to unit test your program. That is, you can test your functions within your program.</li> <li> <p>To utilise <code>pytest</code> please type <code>pip install pytest</code> into your console window. Before applying <code>pytest</code> to our own program, modify your <code>test_calculator</code> function as follows: <pre><code>from calculator import square\n\n\ndef test_assert():\n    assert square(2) == 4\n    assert square(3) == 9\n    assert square(-2) == 4\n    assert square(-3) == 9\n    assert square(0) == 0\n</code></pre> Notice how the above code asserts all the conditions that we want to test.</p> </li> <li> <p><code>pytest</code> allows us to run our program directly through it, such that we can more easily view the results of our test conditions.</p> </li> <li> <p>In the terminal window, type <code>pytest test_calculator.py</code>. You\u2019ll immediately notice that output will be provided. Notice the red <code>F</code> near the top of the output, indicating that something in your code failed. Further, notice that the red <code>E</code> provides some hints about the errors in your <code>calculator.py</code> program. Based upon the output, you can imagine a scenario where <code>3 * 3</code> has outputted <code>6</code> instead of <code>9</code>. Based on the results of this test, we can go correct our <code>calculator.py</code> code as follows: <pre><code>def main():\n    x = int(input(\"What's x? \"))\n    print(\"x squared is\", square(x))\n\n\ndef square(n):\n    return n * n\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice that we have changed the <code>+</code> operator to a <code>*</code> in the square function, returning it to a working state.</p> </li> <li> <p>Re-running <code>pytest test_calculator.py</code>, notice how no errors are produced. Congratulations!</p> </li> <li> <p>At the moment, it is not ideal that <code>pytest</code> will stop running after the first failed test. Again, let\u2019s return our <code>calculator.py</code> code back to its broken state: <pre><code>def main():\n    x = int(input(\"What's x? \"))\n    print(\"x squared is\", square(x))\n\n\ndef square(n):\n    return n + n\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice that we have changed the <code>*</code> operator to a <code>+</code> in the square function, returning it to a broken state.</p> </li> <li> <p>To improve our test code, let\u2019s modify test_calculator.py to divide the code into different groups of tests: <pre><code>from calculator import square\n\n\ndef test_positive():\n    assert square(2) == 4\n    assert square(3) == 9\n\n\ndef test_negative():\n    assert square(-2) == 4\n    assert square(-3) == 9\n\n\ndef test_zero():\n    assert square(0) == 0\n</code></pre> Notice that we have divided the same five tests into three different functions. Testing frameworks like <code>pytest</code> will run each function, even if there was a failure in one of them. Re-running <code>pytest test_calculator.py</code>, you will notice that many more errors are being displayed. More error output allows you to further explore what might be producing the problems within your code.</p> </li> <li> <p>Having improved our test code, return your <code>calculator.py</code> code to fully working order: <pre><code>def main():\n    x = int(input(\"What's x? \"))\n    print(\"x squared is\", square(x))\n\n\ndef square(n):\n    return n * n\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice that we have changed the <code>+</code> operator to a <code>*</code> in the square function, returning it to a working state.</p> </li> <li> <p>Re-running <code>pytest test_calculator.py</code>, you will notice that no errors are found.</p> </li> <li>In summary, it\u2019s up to you as a coder to define as many test conditions as you see fit!</li> <li>You can learn more in Pytest\u2019s documentation of pytest.</li> </ul>"},{"location":"5.%20Unit_Tests/#testing-strings","title":"Testing Strings","text":"<ul> <li> <p>Going back in time, consider the following code <code>hello.py</code>: <pre><code>def main():\n    name = input(\"What's your name? \")\n    hello(name)\n\n\ndef hello(to=\"world\"):\n    print(\"hello,\", to)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice that we may wish to test the result of the <code>hello</code> function.</p> </li> <li> <p>Consider the following code for <code>test_hello.py</code>: <pre><code>from hello import hello\n\n\ndef test_hello():\n    assert hello(\"David\") == \"hello, David\"\n    assert hello() == \"hello, world\"\n</code></pre> Looking at this code, do you think that this approach to testing will work well? Why might this test not work well? Notice that the <code>hello</code> function in <code>hello.py</code> prints something: That is, it does not return a value!</p> </li> <li> <p>We can change our <code>hello</code> function within <code>hello.py</code> as follows: <pre><code>def main():\n    name = input(\"What's your name? \")\n    print(hello(name))\n\n\ndef hello(to=\"world\"):\n    return f\"hello, {to}\"\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice that we changed our <code>hello</code> function to return a string. This effectively means that we can now use <code>pytest</code> to test the <code>hello</code> function.</p> </li> <li> <p>Running <code>pytest test_hello.py</code>, our code will pass all tests!</p> </li> <li> <p>As with our previous test case in this lesson, we can break out our tests separately: <pre><code>from hello import hello\n\n\ndef test_default():\n    assert hello() == \"hello, world\"\n\n\ndef test_argument():\n    assert hello(\"David\") == \"hello, David\"\n</code></pre> Notice that the above code separates our test into multiple functions such that they will all run, even if an error is produced.</p> </li> </ul>"},{"location":"5.%20Unit_Tests/#organising-tests-into-folders","title":"Organising Tests into Folders","text":"<ul> <li>Unit testing code using multiple tests is so common that you have the ability to run a whole folder of tests with a single command.</li> <li>First, in the terminal window, execute <code>mkdir test</code> to create a folder called <code>test</code>.</li> <li>Then, to create a test within that folder, type in the terminal window <code>code test/test_hello.py</code>. Notice that <code>test/</code> instructs the terminal to create <code>test_hello.py</code> in the folder called <code>test</code>.</li> <li> <p>In the text editor window, modify the file to include the following code: <pre><code>from hello import hello\n\n\ndef test_default():\n    assert hello() == \"hello, world\"\n\n\ndef test_argument():\n    assert hello(\"David\") == \"hello, David\"\n</code></pre> Notice that we are creating a test just as we did before.</p> </li> <li> <p><code>pytest</code> will not allow us to run tests as a folder simply with this file (or a whole set of files) alone without a special <code>__init__</code> file. In your terminal window, create this file by typing code <code>test/__init__.py</code>. Note the <code>test/</code> as before, as well as the double underscores on either side of <code>init</code>. Even leaving this <code>__init__.py</code> file empty, <code>pytest</code> is informed that the whole folder containing <code>__init__.py</code> has tests that can be run.</p> </li> <li>Now, typing <code>pytest test</code> in the terminal, you can run the entire <code>test</code> folder of code.</li> <li>You can learn more in Pytest\u2019s documentation of import mechanisms.</li> </ul>"},{"location":"5.%20Unit_Tests/#summing-up","title":"Summing Up","text":"<ul> <li> <p>Testing your code is a natural part of the programming process. Unit tests allow you to test specific aspects of your code. You can create your own programs that test your code. Alternatively, you can utilise frameworks like <code>pytest</code> to run your unit tests for you. </p> </li> <li> <p>In this lecture, you learned about\u2026</p> <ul> <li>Unit tests</li> <li>assert</li> <li>pytest</li> </ul> </li> </ul>"},{"location":"6.%20File_IO/","title":"File IO","text":""},{"location":"6.%20File_IO/#video","title":"Video","text":"<p>  (1:32hr)</p>"},{"location":"6.%20File_IO/#file-io_1","title":"File IO","text":"<ul> <li>Up until now, everything we\u2019ve programmed has stored information in memory. That is, once the program is ended, all information gathered from the user or generated by the program is lost.</li> <li>File I/O is the ability of a program to take a file as input or create a file as output.</li> <li> <p>To begin, in the terminal window type code <code>names.py</code> and code as follows: <pre><code>name = input(\"What's your name?\" )\nprint(f\"hello, {name}\")\n</code></pre> Notice that running this code has the desired output. The user can input a name. The output is as expected.</p> </li> <li> <p>However, what if we wanted to allow multiple names to be inputted? How might we achieve this? Recall that a <code>list</code> is a data structure that allows us to store multiple values into a single variable. Code as follows: <pre><code>names = []\n\nfor _ in range(3):\n    name = input(\"What's your name?\" )\n    names.append(name)\n</code></pre> Notice that the user will be prompted three times for input. The <code>append</code> method is used to add the <code>name</code> to our <code>names</code> list.</p> </li> <li> <p>This code could be simplified to the following: <pre><code>names = []\n\nfor _ in range(3):\n    names.append(input(\"What's your name?\" ))\n</code></pre> Notice that this has the same result as the prior block of code.</p> </li> <li> <p>Now, let\u2019s enable the ability to print the list of names as a sorted list. Code as follows: <pre><code>names = []\n\nfor _ in range(3):\n    names.append(input(\"What's your name?\" ))\n\nfor name in sorted(names):\n    print(f\"hello, {name}\")\n</code></pre> Notice that once this program is executed, all information is lost. File I/O allows your program to store this information such that it can be used later.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of sorted.</p> </li> </ul>"},{"location":"6.%20File_IO/#open","title":"open","text":"<ul> <li><code>open</code> is a functionality built into Python that allows you to open a file and utilise it in your program. The - <code>open</code> function allows you to open a file such that you can read from it or write to it.</li> <li> <p>To show you how to enable file I/O in your program, let\u2019s rewind a bit and code as follows: <pre><code>name = input(\"What's your name? \")\n\nfile = open(\"names.txt\", \"w\")\nfile.write(name)\nfile.close()\n</code></pre> Notice that the <code>open</code> function opens a file called <code>names.txt</code> with writing enabled, as signified by the <code>w</code>. The code above assigns that opened <code>file</code> to a variable called <code>file</code>. The line <code>file.write(name)</code> writes the name to the text file. The line after that closes the file.</p> </li> <li> <p>Testing out your code by typing <code>python names.py</code>, you can input a name and it saves to the text file. However, if you run your program multiple times using different names, you will notice that this program will entirely rewrite the <code>names.txt</code> file each time.</p> </li> <li> <p>Ideally, we want to be able to append each of our names to the file. Remove the existing text file by typing <code>rm names.txt</code> in the terminal window. Then, modify your code as follows: <pre><code>name = input(\"What's your name? \")\n\nfile = open(\"names.txt\", \"a\")\nfile.write(name)\nfile.close()\n</code></pre> Notice that the only change to our code is that the <code>w</code> has been changed to <code>a</code> for \u201cappend\u201d. Rerunning this program multiple times, you will notice that names will be added to the file. However, you will notice a new problem!</p> </li> <li> <p>Examining your text file after running your program multiple times, you\u2019ll notice that the names are running together. The names are being appended without any gaps between each of the names. You can fix this issue. Again, remove the existing text file by typing <code>rm names.txt</code> in the terminal window. Then, modify your code as follows: <pre><code>name = input(\"What's your name? \")\n\nfile = open(\"names.txt\", \"a\")\nfile.write(f\"{name}\\n\")\nfile.close()\n</code></pre> Notice that the line with <code>file.write</code> has been modified to add a line break at the end of each name.</p> </li> <li> <p>This code is working quite well. However, there are ways to improve this program. It so happens that it\u2019s quite easy to forget to close the file.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of open.</p> </li> </ul>"},{"location":"6.%20File_IO/#with","title":"with","text":"<ul> <li>The keyword <code>with</code> allows you to automate the closing of a file.</li> <li> <p>Modify your code as follows: <pre><code>name = input(\"What's your name? \")\n\nwith open(\"names.txt\", \"a\") as file:\n    file.write(f\"{name}\\n\")\n</code></pre> Notice that the line below <code>with</code> is indented.</p> </li> <li> <p>Up until this point, we have been exclusively writing to a file. What if we want to read from a file. To enable this functionality, modify your code as follows: <pre><code>with open(\"names.txt\", \"r\") as file:\n    lines = file.readlines()\n\nfor line in lines:\n    print(\"hello,\", line)\n</code></pre> Notice that <code>readlines</code> has a special ability to read all the lines of a file and store them in a file called lines. Running your program, you will notice that the output is quite ugly. There seem to be multiple line breaks where there should be only one.</p> </li> <li> <p>There are many approaches to fix this issue. However, here is a simple way to fix this error in our code: <pre><code>with open(\"names.txt\", \"r\") as file:\n    lines = file.readlines()\n\nfor line in lines:\n    print(\"hello,\", line.rstrip())\n</code></pre> Notice that <code>rstrip</code> has the effect of removing the extraneous line break at the end of each line.</p> </li> </ul> <p>Still, this code could be simplified even further: <pre><code>with open(\"names.txt\", \"r\") as file:\n    for line in file:\n        print(\"hello,\", line.rstrip())\n</code></pre> Notice that running this code, it is correct. However, notice that we are not sorting the names.</p> <ul> <li> <p>This code could be further improved to allow for the sorting of the names: <pre><code>names = []\n\nwith open(\"names.txt\") as file:\n    for line in file:\n        names.append(line.rstrip())\n\nfor name in sorted(names):\n    print(f\"hello, {name}\")\n</code></pre> Notice that <code>names</code> is a blank list where we can collect the names. Each name is appended to the <code>names</code> list in memory. Then, each name in the sorted list in memory is printed. Running your code, you will see that the names are now properly sorted.</p> </li> <li> <p>What if we wanted the ability to store more than just the names of students? What if we wanted to store both the student\u2019s name and their house as well?</p> </li> </ul>"},{"location":"6.%20File_IO/#csv","title":"CSV","text":"<ul> <li>CSV stands for \u201ccomma separated values\u201d.</li> <li> <p>In your terminal window, type <code>code students.csv</code>. Ensure your new CSV file looks like the following: <pre><code>Hermoine,Gryffindor\nHarry,Gryffindor\nRon,Gryffindor\nDraco,Slytherin\n</code></pre> Let\u2019s create a new program by typing <code>code students.py</code> and code as follows: <pre><code>with open(\"students.csv\") as file:\n    for line in file:\n        row = line.rstrip().split(\",\")\n        print(f\"{row[0]} is in {row[1]}\")\n</code></pre> Notice that <code>rstrip</code> removes the end of each line in our CSV file. <code>split</code> tells the compiler where to find the end of each of our values in our CSV file. <code>row[0]</code> is the first element in each line of our CSV file. <code>row[1]</code> is the second element in each line in our CSV file.</p> </li> <li> <p>The above code is effective at dividing each line or \u201crecord\u201d of our CSV file. However, it\u2019s a bit cryptic to look at if you are unfamiliar with this type of syntax. Python has built-in ability that could further simplify this code. Modify your code as follows: <pre><code>with open(\"students.csv\") as file:\n    for line in file:\n        name, house = line.rstrip().split(\",\")\n        print(f\"{name} is in {house}\")\n</code></pre> Notice that the <code>split</code> function actually returns two values: The one before the comma and the one after the comma. Accordingly, we can rely upon that functionality to assign two variables at once instead of one!</p> </li> <li> <p>Imagine that we would again like to provide this list as sorted output? You can modify your code as follows: <pre><code>students = []\n\nwith open(\"students.csv\") as file:\n    for line in file:\n        name, house = line.rstrip().split(\",\")\n        students.append(f\"{name} is in {house}\")\n\nfor student in sorted(students):\n    print(student)\n</code></pre> Notice that we create a <code>list</code> called <code>students</code>. We <code>append</code> each string to this list. Then, we output a sorted version of our list.</p> </li> <li> <p>Recall that Python allows for <code>dictionaries</code> where a key can be associated with a value. This code could be further improved <pre><code>students = []\n\nwith open(\"students.csv\") as file:\n    for line in file:\n        name, house = line.rstrip().split(\",\")\n        student = {}\n        student[\"name\"] = name\n        student[\"house\"] = house\n        students.append(student)\n\nfor student in students:\n    print(f\"{student['name']} is in {student['house']}\")\n</code></pre> Notice that we create an empty dictionary called <code>student</code>. We add the values for each student, including their name and house into the <code>student</code> dictionary. Then, we <code>append</code> that student to the <code>list</code> called <code>students</code>.</p> </li> <li> <p>We can improve our code to illustrate this as follows: <pre><code>students = []\n\nwith open(\"students.csv\") as file:\n    for line in file:\n        name, house = line.rstrip().split(\",\")\n        student = {\"name\": name, \"house\": house}\n        students.append(student)\n\nfor student in students:\n    print(f\"{student['name']} is in {student['house']}\")\n</code></pre> Notice that this produces the desired outcome, minus the sorting of students.</p> </li> <li> <p>Unfortunately, we cannot sort the students as we had prior because each student is now a dictionary inside of a list. It would be helpful if Python could sort the <code>students</code> list of <code>student</code> dictionaries that sorts this list of dictionaries by the student\u2019s name.</p> </li> <li> <p>To implement this in our code, make the following changes: <pre><code>students = []\n\nwith open(\"students.csv\") as file:\n    for line in file:\n        name, house = line.rstrip().split(\",\")\n        students.append({\"name\": name, \"house\": house})\n\n\ndef get_name(student):\n    return student[\"name\"]\n\n\nfor student in sorted(students, key=get_name):\n    print(f\"{student['name']} is in {student['house']}\")\n</code></pre> Notice that <code>sorted</code> needs to know how to get the <code>key</code> of each student. Python allows for a parameter called <code>key</code> where we can define on what \u201ckey\u201d the list of students will be sorted. Therefore, the <code>get_name</code> function simply returns the key of <code>student[\"name\"]</code>. Running this program, you will now see that the list is now sorted by name.</p> </li> <li> <p>Still, our code can be further improved upon. It just so happens that if you are only going to use a function like <code>get_name</code> once, you can simplify your code in the manner presented below. Modify your code as follows: <pre><code>students = []\n\nwith open(\"students.csv\") as file:\n    for line in file:\n        name, house = line.rstrip().split(\",\")\n        students.append({\"name\": name, \"house\": house})\n\nfor student in sorted(students, key=lambda student: student[\"name\"]):\n    print(f\"{student['name']} is in {student['house']}\")\n</code></pre> Notice how we use a <code>lambda</code> function, an anonymous function, that says \u201cHey Python, here is a function that has no name: Given a <code>student</code>, access their <code>name</code> and return that to the <code>key</code>.</p> </li> <li> <p>Unfortunately, our code is a bit fragile. Suppose that we changed our CSV file such that we indicated where each student grew up. What would be the impact of this upon our program? First, modify your <code>students.csv</code> file as follows: <pre><code>Harry,\"Number Four, Privet Drive\"\nRon,The Burrow\nDraco,Malfoy Manor\n</code></pre> Notice how running our program how will produce a number of errors.</p> </li> <li> <p>Now that we\u2019re dealing with homes instead of houses, modify your code as follows: <pre><code>students = []\n\nwith open(\"students.csv\") as file:\n    for line in file:\n        name, home = line.rstrip().split(\",\")\n        students.append({\"name\": name, \"home\": home})\n\nfor student in sorted(students, key=lambda student: student[\"name\"]):\n    print(f\"{student['name']} is in {student['home']}\")\n</code></pre> Notice that running our program still does not work properly. Can you guess why?</p> </li> <li> <p>The <code>ValueError: too many values to unpack</code> error produced by the compiler is a result of the fact that we previously created this program expecting the CSV file is <code>split</code> using a <code>,</code> (comma). We could spend more time addressing this, but indeed someone else has already developed a way to \u201cparse\u201d (that is, to read) CSV files!</p> </li> <li> <p>Python\u2019s built-in <code>csv</code> library comes with an object called a <code>reader</code>. As the name suggests, we can use a <code>reader</code> to read our CSV file despite the extra comma in \u201cNumber Four, Privet Drive\u201d. A <code>reader</code> works in a <code>for</code> loop, where each iteration the <code>reader</code> gives us another row from our CSV file. This row itself is a list, where each value in the list corresponds to an element in that row. <code>row[0]</code>, for example, is the first element of the given row, while <code>row[1]</code> is the second element. <pre><code>import csv\n\nstudents = []\n\nwith open(\"students.csv\") as file:\n    reader = csv.reader(file)\n    for row in reader:\n        students.append({\"name\": row[0], \"home\": row[1]})\n\nfor student in sorted(students, key=lambda student: student[\"name\"]):\n    print(f\"{student['name']} is from {student['home']}\")\n</code></pre> Notice that our program now works as expected.</p> </li> <li> <p>Up until this point, we have been relying upon our program to specifically decide what parts of our CSV file are the names and what parts are the homes. It\u2019s better design, though, to bake this directly into our CSV file by editing it as follows: <pre><code>name,home\nHarry,\"Number Four, Privet Drive\"\nRon,The Burrow\nDraco,Malfoy Manor\n</code></pre> Notice how we are explicitly saying in our CSV file that anything reading it should expect there to be a name value and a home value in each line.</p> </li> <li> <p>We can modify our code to use a part of the <code>csv</code> library called a <code>DictReader</code> to treat our CSV file with even more flexibility: <pre><code>import csv\n\nstudents = []\n\nwith open(\"students.csv\") as file:\n    reader = csv.DictReader(file)\n    for row in reader:\n        students.append({\"name\": row[\"name\"], \"home\": row[\"home\"]})\n\nfor student in sorted(students, key=lambda student: student[\"name\"]):\n    print(f\"{student['name']} is in {student['home']}\")\n</code></pre> Notice that we have replaced <code>reader</code> with <code>DictReader</code>, which returns one dictionary at a time. Also, notice that the compiler will directly access the <code>row</code> dictionary, getting the <code>name</code> and <code>home</code> of each student. This is an example of coding defensively. As long as the person designing the CSV file has inputted the correct header information on the first line, we can access that information using our program.</p> </li> <li> <p>Up until this point, we have been reading CSV files. What if we want to write to a CSV file?</p> </li> <li>To begin, let\u2019s clean up our files a bit. First, delete the <code>students.csv</code> file by typing <code>rm students.csv</code> in the terminal window. This command will only work if you\u2019re in the same folder as your <code>students.csv</code> file.</li> <li> <p>Then, in <code>students.py</code>, modify your code as follows: <pre><code>import csv\n\nname = input(\"What's your name? \")\nhome = input(\"Where's your home? \")\n\nwith open(\"students.csv\", \"a\") as file:\n    writer = csv.DictWriter(file, fieldnames=[\"name\", \"home\"])\n    writer.writerow({\"name\": name, \"home\": home})\n</code></pre> Notice how we are leveraging the built-in functionality of <code>DictWriter</code>, which takes two parameters: the <code>file</code> being written to and the <code>fieldnames</code> to write. Further, notice how the <code>writerow</code> function takes a dictionary as its parameter. Quite literally, we are telling the compiler to write a row with two fields called <code>name</code> and <code>home</code>.</p> </li> <li> <p>Note that there are many types of files that you can read from and write to.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of CSV.</p> </li> </ul>"},{"location":"6.%20File_IO/#binary-files-and-pil","title":"Binary Files and PIL","text":"<ul> <li>One more type of file that we will discuss today is a binary file. A binary file is simply a collection of ones and zeros. This type of file can store anything including, music and image data.</li> <li>There is a popular Python library called <code>PIL</code> that works well with image files.</li> <li>Animated GIFs are a popular type of image file that has many image files within it that are played in sequence over and over again, creating a simplistic animation or video effect.</li> <li>Imagine that we have a series of costumes, as illustrated below.</li> <li>Here is <code>costume1.gif</code>.</li> </ul> <ul> <li> <p>Here is another one called <code>costume2.gif</code>. Notice how the leg positions are slightly different. </p> </li> <li> <p>Before proceeding, please make sure that you have downloaded the source code files from the course website. It will not be possible for you to code the following without having the two images above in your possession and stored in your IDE.</p> </li> <li> <p>In the terminal window type code <code>costumes.py</code> and code as follows: <pre><code>import sys\n\nfrom PIL import Image\n\nimages = []\n\nfor arg in sys.argv[1:]:\n    image = Image.open(arg)\n    images.append(image)\n\nimages[0].save(\n    \"costumes.gif\", save_all=True, append_images=[images[1]], duration=200, loop=0\n)\n</code></pre> Notice that we import the <code>Image</code> functionality from <code>PIL</code>. Notice that the first <code>for</code> loop simply loops through the <code>images</code> provided as command-line arguments and stores theme into the <code>list</code> called <code>images</code>. The <code>1:</code> starts slicing argv at its second element. The last lines of code saves the first image and also appends a second image to it as well, creating an animated gif. Typing <code>python costumes.py costume1.gif costume2.gif</code> into the terminal. Now, type <code>code costumes.gif</code> into the terminal window, and you can now see an animated GIF.</p> </li> <li> <p>You can learn more in Pillow\u2019s documentation of PIL.</p> </li> </ul>"},{"location":"6.%20File_IO/#summing-up","title":"Summing Up","text":"<p>Now, we have not only seen that we can write and read files textually\u2014we can also read and write files using ones and zeros. We can\u2019t wait to see what you achieve with these new abilities next.</p> <ul> <li>File I/O</li> <li>open</li> <li>with</li> <li>CSV</li> <li>PIL</li> </ul>"},{"location":"7.%20Exceptions/","title":"Exceptions","text":""},{"location":"7.%20Exceptions/#video","title":"Video","text":"<p> (0:44hr)</p>"},{"location":"7.%20Exceptions/#exceptions_1","title":"Exceptions","text":"<ul> <li>Exceptions are things that go wrong within our coding.</li> <li>In our text editor, type <code>code hello.py</code> to create a new file. Type as follows (with the intentional errors included): <pre><code>print(\"hello, world)\n</code></pre></li> <li> <p>Notice that we intentionally left out a quotation mark.</p> </li> <li> <p>Running python <code>hello.py</code> in our terminal window, an error is outputted. The compiler states that it is a \u201csyntax error.\u201d\u201d Syntax errors are those that require you to double-check that you typed in your code correction.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of Errors and Exceptions.</p> </li> </ul>"},{"location":"7.%20Exceptions/#runtime-errors","title":"Runtime Errors","text":"<ul> <li>Runtime errors refer to those created by unexpected behaviour within your code. For example, perhaps you intended for a user to input a number, but they input a character instead. Your program may throw an error because of this unexpected input from the user.</li> <li> <p>In your terminal window, run <code>code number.py</code>. Code as follows in your text editor: <pre><code>x = int(input(\"What's x? \"))\nprint(f\"x is {x}\")\n</code></pre> Notice that by including the <code>f</code>, we tell Python to interpolate what is in the curly braces as the value of <code>x</code>. Further, testing out your code, you can imagine how one could easily type in a string or a character instead of a number. Even still, a user could type nothing at all \u2013 simply hitting the enter key.</p> </li> <li> <p>As programmers, we should be defensive to ensure that our users are entering what we expected. We might consider \u201ccorner cases\u201d such as <code>-1</code>, <code>0</code>, or <code>cat</code>.</p> </li> <li> <p>If we run this program and type in \u201ccat\u201d, we\u2019ll suddenly see <code>ValueError: invalid literal for int() with base 10: 'cat'</code> Essentially, the Python interpreter does not like that we passed \u201ccat\u201d to the <code>print</code> function.</p> </li> <li> <p>An effective strategy to fix this potential error would be to create \u201cerror handling\u201d to ensure the user behaves as we intend.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of Errors and Exceptions.</p> </li> </ul>"},{"location":"7.%20Exceptions/#try-and-except","title":"<code>try</code> and <code>except</code>","text":"<ul> <li> <p>In Python <code>try</code> and <code>except</code> are ways of testing out user input before something goes wrong. Modify your code as follows: <pre><code>try:\n    x = int(input(\"What's x?\"))\n    print(f\"x is {x}\")\nexcept ValueError:\n    print(\"x is not an integer\")\n</code></pre> Notice how, running this code, inputting <code>50</code> will be accepted. However, typing in <code>cat</code> will produce an error visible to the user, instructing them why their input was not accepted.</p> </li> <li> <p>This is still not the best way to implement this code. Notice that we are trying to do two lines of code. For best practice, we should only <code>try</code> the fewest lines of code possible that we are concerned could fail. Adjust your code as follows: <pre><code>try:\n    x = int(input(\"What's x?\"))\nexcept ValueError:\n    print(\"x is not an integer\")\n\nprint(f\"x is {x}\")\n</code></pre> Notice that while this accomplishes our goal of trying as few lines as possible, we now face a new error! We face a <code>NameError</code> where <code>x is not defined</code>. Look at this code and consider: Why is x not defined in some cases?</p> </li> <li> <p>Indeed, if you examine the order of operations in <code>x = int(input(\"What's x?\"))</code>, working right to left, it could take an incorrectly inputted character and attempt to assign it as an integer. If this fails, the assignment of the value of <code>x</code> never occurs. Therefore, there is no x to print on our final line of code.</p> </li> </ul>"},{"location":"7.%20Exceptions/#else","title":"<code>else</code>","text":"<ul> <li> <p>It turns out that there is another way to implement <code>try</code> that could catch errors of this nature.</p> </li> <li> <p>Adjust your code as follows: <pre><code>try:\n    x = int(input(\"What's x?\"))\nexcept ValueError:\n    print(\"x is not an integer\")\nelse:\n    print(f\"x is {x}\")\n</code></pre> Notice that if no exception occurs, it will then run the block of code within <code>else</code>. Running <code>python number.py</code> and supplying <code>50</code>, you\u2019ll notice that the result will be printed. Trying again, this time supplying <code>cat</code>, you\u2019ll notice that the program now catches the error.</p> </li> <li> <p>Considering improving our code, notice that we are being a bit rude to our user. If our user does not cooperate, we currently simply end our program. Consider how we can use a loop to prompt the user for <code>x</code> and if they don\u2019t prompt again! Improve your code as follows: <pre><code>while True:\n    try:\n        x = int(input(\"What's x?\"))\n    except ValueError:\n        print(\"x is not an integer\")\n    else:\n        break\n\nprint(f\"x is {x}\")\n</code></pre> Notice that <code>while True</code> will loop forever. If the user succeeds in supplying the correct input, we can break from the loop and then print the output. Now, a user that inputs something incorrectly will be asked for input again.</p> </li> </ul>"},{"location":"7.%20Exceptions/#creating-a-function-to-get-an-integer","title":"Creating a Function to Get an Integer","text":"<ul> <li> <p>Surely, there are many times that we would want to get an integer from our user. Modify your code as follows: <pre><code>def main():\n    x = get_int()\n    print(f\"x is {x}\")\n\n\ndef get_int():\n    while True:\n        try:\n            x = int(input(\"What's x?\"))\n        except ValueError:\n            print(\"x is not an integer\")\n        else:\n            break\n    return x\n\n\nmain()\n</code></pre> Notice that we are manifesting many great properties. First, we have abstracted away the ability to get an integer. Now, this whole program boils down to the first three lines of the program.</p> </li> <li> <p>Even still, we can improve this program. Consider what else you could do to improve this program. Modify your code as follows: <pre><code>def main():\n    x = get_int()\n    print(f\"x is {x}\")\n\n\ndef get_int():\n    while True:\n        try:\n            x = int(input(\"What's x?\"))\n        except ValueError:\n            print(\"x is not an integer\")\n        else:\n            return x\n\n\nmain()\n</code></pre> Notice that <code>return</code> will not only break you out of a loop, but it will also return a value.</p> </li> <li> <p>Some people may argue you could do the following: <pre><code>def main():\n    x = get_int()\n    print(f\"x is {x}\")\n\n\ndef get_int():\n    while True:\n        try:\n            return int(input(\"What's x?\"))\n        except ValueError:\n            print(\"x is not an integer\")\n\n\nmain()\n</code></pre> Notice this does the same thing as the previous iteration of our code, simply with fewer lines.</p> </li> </ul>"},{"location":"7.%20Exceptions/#pass","title":"<code>pass</code>","text":"<ul> <li> <p>We can make it such that our code does not warn our user, but simply re-asks them our prompting question by modifying our code as follows: <pre><code>def main():\n    x = get_int()\n    print(f\"x is {x}\")\n\n\ndef get_int():\n    while True:\n        try:\n            return int(input(\"What's x?\"))\n        except ValueError:\n            pass\n\n\nmain()\n</code></pre> Notice that our code will still function but will not repeatedly inform the user of their error. In some cases, you\u2019ll want to be very clear to the user what error is being produced. Other times, you might decide that you simply want to ask them for input again.</p> </li> <li> <p>One final refinement that could improve the implementation of this <code>get_int</code> function. Right now, notice that we are relying currently upon the honor system that the <code>x</code> is in both the <code>main</code> and <code>get_int</code> functions. We probably want to pass in a prompt that the user sees when asked for input. Modify your code as follows. <pre><code>def main():\n    x = get_int(\"What's x? \")\n    print(f\"x is {x}\")\n\n\ndef get_int(prompt):\n    while True:\n        try:\n            return int(input(prompt))\n        except ValueError:\n            pass\n\n\nmain()\n</code></pre> You can learn more in Python\u2019s documentation of pass.</p> </li> </ul>"},{"location":"7.%20Exceptions/#finally","title":"<code>finally</code>","text":"<p>The <code>finally</code> block is a special block of code that will run even if an exception has been raised. It is used for clean-up actions, such as closing files or network connections. <pre><code>filename = \"example.txt\"\n\ntry:\n    # Attempt to open the file in read mode\n    with open(filename, 'r') as file:\n        content = file.read()\n        print(\"File content:\", content)\nexcept FileNotFoundError:\n    # Handle the exception if the file is not found\n    print(f\"Error: The file {filename} does not exist.\")\nexcept Exception as e:\n    # Handle any other exceptions that may occur\n    print(f\"An error occurred: {e}\")\nfinally:\n    # This block will execute regardless of whether an exception was raised or not\n    # In this case, it's used to inform the user that the operation is complete\n    print(\"Operation completed.\")\n</code></pre></p>"},{"location":"7.%20Exceptions/#summing-up","title":"Summing Up","text":"<p>Errors are inevitable in your code. However, you have the opportunity to use what was learned today to help prevent these errors. In this lecture, you learned about\u2026</p> <ul> <li>Exceptions</li> <li>Value Errors</li> <li>Runtime Errors</li> <li><code>try</code></li> <li><code>except</code></li> <li><code>else</code></li> <li><code>pass</code></li> <li><code>finally</code></li> </ul>"},{"location":"8.%20Libraries/","title":"Libraries","text":""},{"location":"8.%20Libraries/#video","title":"Video","text":"<p> (1:17hr)</p>"},{"location":"8.%20Libraries/#lecture-4-libraries","title":"Lecture 4 - Libraries","text":"<p>Watch the Libraries video (1.27hr).</p>"},{"location":"8.%20Libraries/#libraries_1","title":"Libraries","text":"<ul> <li>Generally, libraries are bits of code written by you or others can you can use in your program.</li> <li>Python allows you to share functions or features with others as \u201cmodules\u201d.</li> <li>If you copy and paste code from an old project, chances are you can create such a module or library that you could bring into your new project.</li> </ul>"},{"location":"8.%20Libraries/#random","title":"Random","text":"<ul> <li><code>random</code> is a library that comes with Python that you could <code>import</code> into your own project.</li> <li>It\u2019s easier as a coder to stand on the shoulders of prior coders.</li> <li>So, how do you load a module into your own program? You can use the word <code>import</code> in your program.</li> <li>Inside the <code>random</code> module, there is a built-in function called <code>random.choice(seq)</code>. <code>random</code> is the module you are importing. Inside that module, there is the <code>choice</code> function. - That function takes into it a <code>seq</code> or sequence that is a list.</li> <li> <p>In your terminal window type code <code>generate.py</code>. In your text editor, code as follows: <pre><code>import random\n\ncoin = random.choice([\"heads\", \"tails\"])\nprint(coin)\n</code></pre> Notice that the list within <code>choice</code> has square braces, quotes, and a comma. Since you have passed in two items, Python does the math and gives a 50% chance for heads and tails. Running your code, you will notice that this code, indeed, does function well!</p> </li> <li> <p>We can improve our code. <code>from</code> allows us to be very specific about what we\u2019d like to <code>import</code>. Prior, our import line of code is bringing the entire contents of the functions of <code>random</code>. However, what if we want to only load a small part of a module? Modify your code as follows: <pre><code>from random import choice\n\ncoin = choice([\"heads\", \"tails\"])\nprint(coin)\n</code></pre> Notice that we now can <code>import</code> just the <code>choice</code> function of <code>random</code>. From that point forward, we no longer need to code <code>random.choice</code>. We can now only code <code>choice</code> alone. <code>choice</code> is loaded explicitly into our program. This saves system resources and potentially can make our code run faster!</p> </li> <li> <p>Moving on, consider the function <code>random.randint(a, b)</code>. This function will generate a random number between <code>a</code> and <code>b</code>. Modify your code as follows: <pre><code>import random\n\nnumber = random.randint(1, 10)\nprint(number)\n</code></pre> Notice that our code will randomly generate a number between <code>1</code> and <code>10</code>.</p> </li> <li> <p>We can introduce into our card <code>random.shuffle(x)</code> where it will shuffle a list into a random order. <pre><code>import random\n\ncards = [\"jack\", \"queen\", \"king\"]\nrandom.shuffle(cards)\nfor card in cards:\n    print(card)\n</code></pre> Notice that <code>random.shuffle</code> will shuffle the <code>cards</code> in place. Unlike other functions, it will not return a value. Instead, it will take the <code>cards</code> list and shuffle them inside that list. Run your code a few times to see the code functioning.</p> </li> <li> <p>We now have these three ways above to generate random information.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of random.</p> </li> </ul>"},{"location":"8.%20Libraries/#statistics","title":"Statistics","text":"<ul> <li> <p>Python comes with a built-in <code>statistics</code> library. How might we use this module? <code>average</code> is a function of this library that is quite useful. In your terminal window, type <code>code average.py</code>. In the text editor window, modify your code as follows: <pre><code>import statistics\n\nprint(statistics.mean([100, 90]))\n</code></pre> Notice that we imported a different library called <code>statistics</code>. The <code>mean</code> function takes a list of values. This will print the average of these values. In your terminal window, type <code>python average.py</code>.</p> </li> <li> <p>Consider the possibilities of using the <code>statistics</code> module in your own programs.</p> </li> <li>You can learn more in Python\u2019s documentation of statistics.</li> </ul>"},{"location":"8.%20Libraries/#command-line-arguments","title":"Command-Line Arguments","text":"<ul> <li>So far, we have been providing all values within the program that we have created. What if we wanted to be able to take input from the command-line? For example, rather than typing <code>python average.py</code> in the terminal, what if we wanted to be able to type <code>python average.py 100 90</code> and be able to get the average between <code>100</code> and <code>90</code>?</li> <li><code>sys</code> is a module that allows us to take arguments at the command line.</li> <li> <p><code>argv</code> is a function within the <code>sys</code> module that allows us to learn about what the user typed in at the command line. Notice how you will see <code>sys.argv</code> utilised in the code below. In the terminal window, type <code>code name.py</code>. In the text editor, code as follows: <pre><code>import sys\n\nprint(\"hello, my name is\", sys.argv[1])\n</code></pre> Notice that the program is going to look at what the user typed in the command line. Currently, if you type <code>python name.py David</code> into the terminal window, you will see <code>hello, my name is David</code>. Notice that <code>sys.argv[1]</code> is where <code>David</code> is being stored. Why is that? Well, in prior lessons, you might remember that lists start at the <code>0</code>th element. What do you think is held currently in <code>sys.argv[0]</code>? If you guessed <code>name.py</code>, you would be correct!</p> </li> <li> <p>There is a small problem with our program as it stands. What if the user does not type in the name at the command line? Try it yourself. Type <code>python name.py</code> into the terminal window. An error <code>list index out of range</code> will be presented by the compiler. The reason for this is that there is nothing at <code>sys.argv[1]</code> because nothing was typed! Here\u2019s how we can protect our program from this type of error: <pre><code>import sys\n\ntry:\n    print(\"hello, my name is\", sys.argv[1])\nexcept IndexError:\n    print(\"Too few arguments\")\n</code></pre> Notice that the user will now be prompted with a useful hint about how to make the program work if they forget to type in a name. However, could we be more defensive to ensure the user inputs the right values?</p> </li> <li> <p>Our program can be improved as follows: <pre><code>import sys\n\nif len(sys.argv) &lt; 2:\n    print(\"Too few arguments\")\nelif len(sys.argv) &gt; 2:\n    print(\"Too many arguments\")\nelse:\n    print(\"hello, my name is\", sys.argv[1])\n</code></pre> Notice how if you test your code, you will see how these exceptions are handled, providing the user with more refined advice. Even if the user types in too many or too few arguments, the user is provided clear instructions about how to fix the issue.</p> </li> <li> <p>Right now, our code is logically correct. However, there is something very nice about keeping our error checking separate from the remainder of our code. How could we separate out our error handling? Modify your code as follows: <pre><code>import sys\n\nif len(sys.argv) &lt; 2:\n    sys.exit(\"Too few arguments\")\nelif len(sys.argv) &gt; 2:\n    sys.exit(\"Too many arguments\")\n\nprint(\"hello, my name is\", sys.argv[1])\n</code></pre> Notice how we are using a built-in function of <code>sys</code> called <code>exit</code> that allows us to exit the program if an error was introduced by the user. We can rest assured now that the program will never execute the final line of code and trigger an error. Therefore, <code>sys.argv</code> provides a way by which users can introduce information from the command line. <code>sys.exit</code> provides a means by which the program can exit if an error arises.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of sys.</p> </li> </ul>"},{"location":"8.%20Libraries/#slice","title":"slice","text":"<ul> <li> <p><code>slice</code> is a command that allows us to take a <code>list</code> and tell the compiler where we want the compiler to consider the start of the <code>list</code> and the end of the <code>list</code>. For example, modify your code as follows: <pre><code>import sys\n\nif len(sys.argv) &lt; 2:\n    sys.exit(\"Too few arguments\")\n\nfor arg in sys.argv:\n    print(\"hello, my name is\", arg)\n</code></pre> Notice that if you type <code>python name.py David Carter Rongxin</code> into the terminal window, the compiler will output not just the intended output of the names, but also <code>hello, my name is name.py</code>. How then could we ensure that the compiler ignores the first element of the list where <code>name.py</code> is currently being stored?</p> </li> <li> <p><code>slice</code> can be employed in our code to start the list somewhere different! Modify your code as follows: <pre><code>import sys\n\nif len(sys.argv) &lt; 2:\n    sys.exit(\"Too few arguments\")\n\nfor arg in sys.argv[1:]:\n    print(\"hello, my name is\", arg)\n</code></pre> Notice that rather than starting the list at <code>0</code>, we use square brackets to tell the compiler to start at <code>1</code> and go to the end using the <code>1:</code> argument. Running this code, you\u2019ll notice that we can improve our code using relatively simple syntax.</p> </li> </ul>"},{"location":"8.%20Libraries/#packages","title":"Packages","text":"<ul> <li>One of the reasons Python is so popular is that there are numerous powerful third-party libraries that add functionality. We call these third-party libraries, implemented as a folder, \u201cpackages\u201d.</li> <li>PyPI is a repository or directory of all available third-party packages currently available.</li> <li><code>cowsay</code> is a well-known package that allows a cow to talk to the user.</li> <li>Python has a package manager called <code>pip</code> that allows you to install packages quickly onto your system.</li> <li>In the terminal window, you can install the <code>cowsay</code> package by typing <code>pip install cowsay</code>. After a bit of output, you can now go about using this package in your code. In your terminal window type <code>code say.py</code>. In the text editor, code as follows: <pre><code>import cowsay\nimport sys\n\nif len(sys.argv) == 2:\n    cowsay.cow(\"hello, \" + sys.argv[1])\n</code></pre> Notice that the program first checks that the user inputted at least two arguments at the command line. Then, the cow should speak to the user. Type <code>python say.py David</code> and you\u2019ll see a cow saying \u201chello\u201d to David.</li> </ul> <p>Further modify your code: <pre><code>import cowsay\nimport sys\n\nif len(sys.argv) == 2:\n    cowsay.trex(\"hello, \" + sys.argv[1])\n</code></pre> Notice that a t-rex is now saying \u201chello\u201d.</p> <ul> <li>You now can see how you could install third-party packages.</li> <li>You can learn more on PyPI\u2019s entry for <code>cowsay</code></li> <li>You can find other third-party packages at PyPI</li> </ul>"},{"location":"8.%20Libraries/#apis","title":"APIs","text":"<ul> <li>APIs or \u201capplication program interfaces\u201d allow you to connect to the code of others.</li> <li><code>requests</code> is a package that allows your program to behave as a web browser would.</li> <li>In your terminal, type <code>pip install requests</code>. Then, type <code>code itunes.py</code>.</li> <li>It turns out that Apple iTunes has its own API that you can access in your programs. In your internet browser, you can visit https://itunes.apple.com/search?entity=song&amp;limit=1&amp;term=weezer and a text file will be downloaded. David constructed this URL by reading Apple\u2019s API documentation. Notice how this query is looking for a song, with a <code>limit</code> of one result, that relates to the <code>term</code> called <code>weezer</code>. Looking at this text file that is downloaded, you might find the format to be similar to that we\u2019ve programmed previously in Python.</li> <li>The format in the downloaded text file is called JSON, a text-based format that is used to exchange text-based data between applications. Literally, Apple is providing a JSON file that we could interpret in our own Python program.</li> <li>In the terminal window, type <code>code itunes.py</code>. Code as follows: <pre><code>import requests\nimport sys\n\nif len(sys.argv) != 2:\n    sys.exit()\n\nresponse = requests.get(\"https://itunes.apple.com/search?entity=song&amp;limit=1&amp;term=\" + sys.argv[1])\nprint(response.json())\n</code></pre> Notice how the returned value of <code>requests.get</code> will be stored in <code>response</code>. David, having read the Apple documentation about this API, knows that what is returned is a JSON file. Running <code>python itunes.py weezer</code>, you will see the JSON file returned by Apple. However, the JSON response is converted by Python into a dictionary. Looking at the output, it can be quite dizzying!</li> </ul> <p>Note</p> <p>JSON is a data format that is easy for humans to read and write, but also easy for machines to parse and generate. It is based on a subset of the JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999. JSON is a text format that is completely language independent but uses conventions that are familiar to programmers of the C-family of languages, including C, C++, C#, Java, JavaScript, Perl, Python, and many others. These properties make JSON an ideal data-interchange language.</p> <ul> <li> <p>It turns out that Python has a built-in JSON library that can help us interpret the data received. Modify your code as follows: <pre><code>import json\nimport requests\nimport sys\n\nif len(sys.argv) != 2:\n    sys.exit()\n\nresponse = requests.get(\"https://itunes.apple.com/search?entity=song&amp;limit=1&amp;term=\" + sys.argv[1])\nprint(json.dumps(response.json(), indent=2))\n</code></pre> Notice that <code>json.dumps</code> is implemented such that it utilizes indent to make the output more readable. Running <code>python itunes.py weezer</code>, you will see the same JSON file. However, this time, it is much more readable. Notice now that you will see a dictionary called <code>results</code> inside the output. Inside that dictionary called <code>results</code> there are numerous keys present. Look at the <code>trackName</code> value in the output. What track name do you see in your results?</p> </li> <li> <p>How could we simply output the name of just that track name? Modify your code as follows: <pre><code>import json\nimport requests\nimport sys\n\nif len(sys.argv) != 2:\n    sys.exit()\n\nresponse = requests.get(\"https://itunes.apple.com/search?entity=song&amp;limit=50&amp;term=\" + sys.argv[1])\n\no = response.json()\nfor result in o[\"results\"]:\n    print(result[\"trackName\"])\n</code></pre> Notice how we are taking the result of <code>response.json()</code> and storing it in <code>o</code> (as in the lowercase letter). Then, we are iterating through the <code>results</code> in <code>o</code> and printing each <code>trackName</code>. Also notice how we have increased the limit number of results to <code>50</code>. Run your program. See the results.</p> </li> <li> <p>You can learn more about <code>requests</code> through the library\u2019s documentation.</p> </li> <li>You can learn more about JSON in Python\u2019s documentation of JSON.</li> </ul>"},{"location":"8.%20Libraries/#making-your-own-libraries","title":"Making Your Own Libraries","text":"<ul> <li>You have the ability as a Python programmer to create your own library!</li> <li>Imagine situations where you may want to re-use bits of code time and time again or even share them with others!</li> <li> <p>We have been writing lots of code to say \u201chello\u201d so far in this course. Let\u2019s create a package to allow us to say \u201chello\u201d and \u201cgoodbye\u201d. In your terminal window, type <code>code sayings.py</code>. In the text editor, code as follows: <pre><code>def hello(name):\n    print(f\"hello, {name}\")\n\n\ndef goodbye(name):\n    print(f\"goodbye, {name}\")\n</code></pre> Notice that this code in and of itself does not do anything for the user. However, if a programmer were to import this package into their own program, the abilities created by the functions above could be implemented in their code.</p> </li> <li> <p>Let\u2019s see how we could implement code utilising this package that we created. In the terminal window, type <code>code say.py</code>. In this new file in your text editor, type the following: <pre><code>import sys\n\nfrom saying import goodbye\n\nif len(sys.argv) == 2:\n    goodbye(sys.argv[1])\n</code></pre> Notice that this code imports the abilities of <code>goodbye</code> from the <code>sayings</code> package. If the user inputted at least two arguments at the command line, it will say \u201cgoodbye\u201d along with the string inputted at the command line.</p> </li> </ul>"},{"location":"8.%20Libraries/#summing-up","title":"Summing Up","text":"<p>Libraries extend the abilities of Python. Some libraries are included by default with Python and simply need to be imported. Others are third-party packages that need to be installed using pip. You can make your own packages for use by yourself or others! In this lecture, you learned about\u2026</p> <ul> <li>Libraries</li> <li>Random</li> <li>Statistics</li> <li>Command-Line Arguments</li> <li>Slice</li> <li>Packages</li> <li>APIs</li> <li>Making Your Own Libraries</li> </ul>"},{"location":"9.%20Object_Oriented_Programming/","title":"Object Oriented Programming","text":""},{"location":"9.%20Object_Oriented_Programming/#video","title":"Video","text":""},{"location":"9.%20Object_Oriented_Programming/#object-oriented-programming_1","title":"Object-Oriented Programming","text":"<ul> <li>There are different paradigms of programming. As you learn other languages, you will start recognising patterns like these.</li> <li>Up until this point, you have worked procedurally step-by-step.</li> <li>Object-oriented programming (OOP) is a compelling solution to programming-related problems.</li> <li> <p>To begin, type <code>code student.py</code> in the terminal window and code as follows: <pre><code>name = input(\"Name: \")\nhouse = input(\"House: \")\nprint(f\"{name} from {house}\")\n</code></pre> Notice that this program follows a procedural, step-by-step paradigm: Much like you have seen in prior parts of this course.</p> </li> <li> <p>Drawing on our work from previous weeks, we can create functions to abstract away parts of this program. <pre><code>def main():\n    name = get_name()\n    house = get_house()\n    print(f\"{name} from {house}\")\n\n\ndef get_name():\n    return input(\"Name: \")\n\n\ndef get_house():\n    return input(\"House: \")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice how <code>get_name</code> and <code>get_house</code> abstract away some of the needs of our main function. Further, notice how the final lines of the code above tell the compiler to run the main function.</p> </li> <li> <p>We can further simplify our program by storing the student as a <code>tuple</code>. A <code>tuple</code> is a sequences of values. Unlike a <code>list</code>, a <code>tuple</code> can\u2019t be modified. In spirit, we are returning two values. <pre><code>def main():\n    name, house = get_student()\n    print(f\"{name} from {house}\")\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return name, house\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice how <code>get_student</code> returns <code>name, house</code>.</p> </li> <li> <p>Packing that <code>tuple</code>, such that we are able to return both items to a variable called student, we can modify our code as follows. <pre><code>def main():\n    student = get_student()\n    print(f\"{student[0]} from {student[1]}\")\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return (name, house)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice that (<code>name, house</code>) explicitly tells anyone reading our code that we are returning two values within one. Further, notice how we can index into <code>tuple</code>s using <code>student[0]</code> or <code>student[1]</code>.</p> </li> <li> <p><code>tuples</code> are immutable, meaning we cannot change those values. Immutability is a way by which we can program defensively. <pre><code>def main():\n    student = get_student()\n    if student[0] == \"Padma\":\n        student[1] = \"Ravenclaw\"\n    print(f\"{student[0]} from {student[1]}\")\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return name, house\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice that this code produces an error. Since <code>tuple</code>s are immutable, we\u2019re not able to reassign the value of <code>student[1]</code>.</p> </li> <li> <p>If we wanted to provide our fellow programmers flexibility, we could utilise a <code>list</code> as follows. <pre><code>def main():\n    student = get_student()\n    if student[0] == \"Padma\":\n        student[1] = \"Ravenclaw\"\n    print(f\"{student[0]} from {student[1]}\")\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return [name, house]\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Note the <code>lists</code> are mutable. That is, the order of <code>house</code> and <code>name</code> can be switched by a programmer. You might decide to utilize this in some cases where you want to provide more flexibility at the cost of the security of your code. After all, if the order of those values is changeable, programmers that work with you could make mistakes down the road.</p> </li> <li> <p>A dictionary could also be utilised in this implementation. Recall that dictionaries provide a key-value pair. <pre><code>def main():\n    student = get_student()\n    print(f\"{student['name']} from {student['house']}\")\n\n\ndef get_student():\n    student = {}\n    student[\"name\"] = input(\"Name: \")\n    student[\"house\"] = input(\"House: \")\n    return student\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice in this case, two key-value pairs are returned. An advantage of this approach is that we can index into this dictionary using the keys.</p> </li> <li> <p>Still, our code can be further improved. Notice that there is an unneeded variable. We can remove <code>student = {}</code> because we don\u2019t need to create an empty dictionary. <pre><code>def main():\n    student = get_student()\n    print(f\"{student['name']} from {student['house']}\")\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return {\"name\": name, \"house\": house}\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice we can utilise <code>{}</code> braces in the <code>return</code> statement to create the dictionary and return it all in the same line.</p> </li> <li> <p>We can provide our special case with <code>Padm</code>a in our dictionary version of our code. <pre><code>def main():\n    student = get_student()\n    if student[\"name\"] == \"Padma\":\n        student[\"house\"] = \"Ravenclaw\"\n    print(f\"{student['name']} from {student['house']}\")\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return {\"name\": name, \"house\": house}\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice how, similar in spirit to our previous iterations of this code, we can utilise the key names to index into our student dictionary.</p> </li> </ul>"},{"location":"9.%20Object_Oriented_Programming/#classes","title":"Classes","text":"<ul> <li>Classes are a way to encapsulate (contain) data and functionality together. They allow us to create objects that have attributes (data) and methods (functions).</li> <li>We can create a class for our <code>Student</code> object and use it to encapsulate the data and functionality of our program.</li> <li>We can also add methods to our class to encapsulate the functionality of our program.</li> <li>The class is like a blueprint or template for creating objects.</li> </ul> <p><pre><code>class Student:\n    ...\n\n\ndef main():\n    student = get_student()\n    print(f\"{student.name} from {student.house}\")\n\n\ndef get_student():\n    student = Student()\n    student.name = input(\"Name: \")\n    student.house = input(\"House: \")\n    return student\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice by convention that <code>Student</code> is capitalised. Further, notice the <code>...</code> simply means that we will later return to finish that portion of our code. Further, notice that in <code>get_student</code>, we can create a <code>student</code> of class <code>Student</code> using the syntax <code>student = Student()</code>. Further, notice that we utilise \u201cdot notation\u201d to access attributes of this variable <code>student</code> of class <code>Student</code>.</p> <ul> <li>Any time you create a class and you utilise that blueprint to create something, you create what is called an \u201cobject\u201d or an \u201cinstance\u201d. In the case of our code, <code>student</code> is an object.</li> <li> <p>Further, we can lay some groundwork for the attributes that are expected inside an object whose class is <code>Student</code>. We can modify our code as follows: <pre><code>class Student:\n    def __init__(self, name, house):\n        self.name = name\n        self.house = house\n\n\ndef main():\n    student = get_student()\n    print(f\"{student.name} from {student.house}\")\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    student = Student(name, house)\n    return student\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice that within <code>Student</code>, we standardise the attributes of this class. We can create a function within class <code>Student</code>, called a \u201cmethod\u201d, that determines the behaviour of an object of class <code>Student</code>. Within this function, it takes the <code>name</code> and <code>house</code> passed to it and assigns these variables to this object. Further, notice how the <code>constructor student = Student(name, house)</code> calls this function within the <code>Student</code> class and creates a <code>student</code>. <code>self</code> refers to the current object that was just created.</p> </li> <li> <p>We can simplify our code as follows: <pre><code>class Student:\n    def __init__(self, name, house):\n        self.name = name\n        self.house = house\n\n\ndef main():\n    student = get_student()\n    print(f\"{student.name} from {student.house}\")\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return Student(name, house)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice how <code>return Student(name, house)</code> simplifies the previous iteration of our code where the constructor statement was run on its own line.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of classes.</p> </li> </ul>"},{"location":"9.%20Object_Oriented_Programming/#raise","title":"<code>raise</code>","text":"<ul> <li> <p>Object-oriented program encourages you to encapsulate all the functionality of a class within the class definition. What if something goes wrong? What if someone tries to type in something random? What if someone tries to create a student without a name? Modify your code as follows: <pre><code>class Student:\n    def __init__(self, name, house):\n        if not name:\n            raise ValueError(\"Missing name\")\n        if house not in [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"]:\n            raise ValueError(\"Invalid house\")\n        self.name = name\n        self.house = house\n\n\ndef main():\n    student = get_student()\n    print(f\"{student.name} from {student.house}\")\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return Student(name, house)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice how we check now that a name is provided and a proper house is designated. It turns out we can create our own exceptions that alerts the programmer to a potential error created by the user called <code>raise</code>. In the case above, we raise <code>ValueError</code> with a specific error message.</p> </li> <li> <p>It just so happens that Python allows you to create a specific function by which you can print the attributes of an object. Modify your code as follows: <pre><code>class Student:\n    def __init__(self, name, house, patronus):\n        if not name:\n            raise ValueError(\"Missing name\")\n        if house not in [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"]:\n            raise ValueError(\"Invalid house\")\n        self.name = name\n        self.house = house\n        self.patronus = patronus\n\n    def __str__(self):\n        return f\"{self.name} from {self.house}\"\n\n\ndef main():\n    student = get_student()\n    print(student)\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    patronus = input(\"Patronus: \")\n    return Student(name, house, patronus)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice how <code>def __str__(self)</code> provides a means by which a student is returned when called. Therefore, you can now, as the programmer, print an object, its attributes, or almost anything you desire related to that object.</p> </li> <li> <p><code>__str__</code> is a built-in method that comes with Python classes. It just so happens that we can create our own methods for a class as well! Modify your code as follows: <pre><code>class Student:\n    def __init__(self, name, house, patronus=None):\n        if not name:\n            raise ValueError(\"Missing name\")\n        if house not in [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"]:\n            raise ValueError(\"Invalid house\")\n        if patronus and patronus not in [\"Stag\", \"Otter\", \"Jack Russell terrier\"]:\n            raise ValueError(\"Invalid patronus\")\n        self.name = name\n        self.house = house\n        self.patronus = patronus\n\n    def __str__(self):\n        return f\"{self.name} from {self.house}\"\n\n    def charm(self):\n        match self.patronus:\n            case \"Stag\":\n                return \"\ud83d\udc34\"\n            case \"Otter\":\n                return \"\ud83e\udda6\"\n            case \"Jack Russell terrier\":\n                return \"\ud83d\udc36\"\n            case _:\n                return \"\ud83e\ude84\"\n\n\ndef main():\n    student = get_student()\n    print(\"Expecto Patronum!\")\n    print(student.charm())\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    patronus = input(\"Patronus: \") or None\n    return Student(name, house, patronus)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice how we define our own method <code>charm</code>. Unlike dictionaries, classes can have built-in functions called methods. In this case, we define our <code>charm</code> method where specific cases have specific results. Further, notice that Python has the ability to utilise emojis directly in our code.</p> </li> <li> <p>Before moving forward, let us remove our patronus code. Modify your code as follows: <pre><code>class Student:\n    def __init__(self, name, house):\n        if not name:\n            raise ValueError(\"Invalid name\")\n        if house not in [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"]:\n            raise ValueError(\"Invalid house\")\n        self.name = name\n        self.house = house\n\n    def __str__(self):\n        return f\"{self.name} from {self.house}\"\n\n\ndef main():\n    student = get_student()\n    student.house = \"Number Four, Privet Drive\"\n    print(student)\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return Student(name, house)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice how we have only two methods: <code>__init__</code> and <code>__str__</code>.</p> </li> </ul>"},{"location":"9.%20Object_Oriented_Programming/#types","title":"types","text":"<ul> <li>While not explicitly stated in past portions of this course, you have been using classes and objects the whole way through.</li> <li>If you dig into the documentation of <code>int</code>, you\u2019ll see that it is a class with a constructor. It\u2019s a blueprint for creating objects of type <code>int</code>. You can learn more in Python\u2019s documentation of int.</li> <li>Strings too are also a class. If you have used <code>str.lower()</code>, you were using a method that came within the <code>str</code> class. You can learn more in Python\u2019s documentation of str. <code>list</code> is also a class. Looking at that documentation for <code>list</code>, you can see the methods that are contained therein, like <code>list.append()</code>. You can learn more in Python\u2019s documentation of list. <code>dict</code> is also a class within Python. You can learn more in Python\u2019s documentation of dict.</li> <li> <p>To see how you have been using classes all along, go to your console and type <code>code type.py</code> and then code as follows: <pre><code>print(type(50))\n</code></pre> Notice how by executing this code, it will display that the class of <code>50</code> is <code>int</code>.</p> </li> <li> <p>We can also apply this to <code>str</code> as follows: <pre><code>print(type(\"hello, world\"))\n</code></pre> Notice how executing this code will indicate this is of the class <code>str</code>.</p> </li> <li> <p>We can also apply this to <code>list</code> as follows: <pre><code>print(type([]))\n</code></pre> Notice how executing this code will indicate this is of the class <code>list</code>.</p> </li> <li> <p>We can also apply this to a <code>list</code> using the name of Python\u2019s built-in <code>list</code> class as follows: <pre><code>print(type(list()))\n</code></pre> Notice how executing this code will indicate this is of the class <code>list</code>.</p> </li> <li> <p>We can also apply this to <code>dict</code> as follows: <pre><code>print(type({}))\n</code></pre> Notice how executing this code will indicate this is of the class <code>dict</code>.</p> </li> <li> <p>We can also apply this to a dict using the name of Python\u2019s built in <code>dict</code> class as follows: <pre><code>print(type(dict()))\n</code></pre> Notice how executing this code will indicate this is of the class <code>dict</code>.</p> </li> </ul>"},{"location":"9.%20Object_Oriented_Programming/#inheritance","title":"Inheritance","text":"<ul> <li>Inheritance is, perhaps, the most powerful feature of object-oriented programming.</li> <li>It just so happens that you can create a class that \u201cinherits\u201d methods, variables, and attributes from another class.</li> <li>In the terminal, execute <code>code wizard.py</code>. Code as follows: <pre><code>class Wizard:\n    def __init__(self, name):\n        if not name:\n            raise ValueError(\"Missing name\")\n        self.name = name\n\n    ...\n\n\nclass Student(Wizard):\n    def __init__(self, name, house):\n        super().__init__(name)\n        self.house = house\n\n    ...\n\n\nclass Professor(Wizard):\n    def __init__(self, name, subject):\n        super().__init__(name)\n        self.subject = subject\n\n    ...\n\n\nwizard = Wizard(\"Albus\")\nstudent = Student(\"Harry\", \"Gryffindor\")\nprofessor = Professor(\"Severus\", \"Defense Against the Dark Arts\")\n...\n</code></pre> Notice that there is a class above called <code>Wizard</code> and a class called <code>Student</code>. Further, notice that there is a class called <code>Professor</code>. Both students and professors have names. Also, both students and professors are wizards. Therefore, both <code>Student</code> and <code>Professor</code> inherit the characteristics of <code>Wizard</code>. Within the \u201cchild\u201d class <code>Student</code>, <code>Student</code> can inherit from the \u201cparent\u201d or \u201csuper\u201d class <code>Wizard</code> as the line <code>super().__init__(name)</code> runs the <code>init</code> method of <code>Wizard</code>. Finally, notice that the last lines of this code create a wizard called Albus, a student called Harry, and so on.</li> </ul>"},{"location":"9.%20Object_Oriented_Programming/#inheritance-and-exceptions","title":"Inheritance and Exceptions","text":"<ul> <li>While we have just introduced inheritance, we have been using this all along during our use of exceptions.</li> <li>It just so happens that exceptions come in a hierarchy, where there are children, parent, and grandparent classes. These are illustrated below: <pre><code>BaseException\n+-- KeyboardInterrupt\n+-- Exception\n+-- ArithmeticError\n| +-- ZeroDivisionError\n+-- AssertionError\n+-- AttributeError\n+-- EOFError\n+-- ImportError\n| +-- ModuleNotFoundError\n+-- LookupError\n| +-- KeyError\n+-- NameError\n+-- SyntaxError\n| +-- IndentationError\n+-- ValueError\n...\n</code></pre> You can learn more in Python\u2019s documentation of exceptions.</li> </ul>"},{"location":"9.%20Object_Oriented_Programming/#generalisation","title":"Generalisation","text":"<ul> <li>Generalisation is the process of creating a more general class that can be used to create specific classes. This is done by defining common attributes and methods in a base class and then defining specific attributes and methods in derived classes.</li> <li> <p>For example, consider the following code where we may be using digital advertising for images. <pre><code>class Image:\n    def __init__(self, filename):\n        self.filename = filename\n        self.width = None\n        self.height = None\n        self.format = None\n    def dimensions(self):\n        return (self.width, self.height)\n    def format(self):\n        return self.format\n</code></pre></p> </li> <li> <p>After some time, our clients ask us to create an ad for videos. We can create a new class <code>Video</code> that inherits from the <code>Image</code> class and adds specific attributes and methods for videos. This way, we can reuse the code for images and only add the specific code for videos. <pre><code>class Video(Image):\n    def __init__(self, filename, duration):\n        super().__init__(filename)\n        self.duration = duration\n    def play(self):\n        print(f\"Playing {self.filename} for {self.duration} seconds\")\n</code></pre></p> </li> <li> <p>Later on, our clients ask us to create an ad for audio. We could create another class <code>Audio</code> that inherits from the <code>Image</code> class and adds specific attributes and methods for audio. This way, we can reuse the code for images and only add the specific code for audio. But that sounds a bit odd, as an audio file doesn't have dimensions or something to display. </p> </li> <li>We can use abstraction to pull out the common attributes and methods into an abstract base class <code>Media</code> and then create concrete classes for images, videos, and audio that inherit from this abstract base class. <code>Media</code> would be the generalisation of <code>Image</code>, <code>Video</code>, and <code>Audio</code>. <pre><code>from abc import ABC, abstractmethod\nclass Media(ABC):\n    def __init__(self, filename):\n        self._filename = filename\n\n    @abstractmethod\n    def format(self):\n        pass\n\n    @property\n    def filename(self):\n        return self._filename\n\n\nclass Image(Media):\n    def __init__(self, filename, width, height):\n        super().__init__(filename)\n        self.width = width\n        self.height = height\n    def format(self):\n        return f\"{self.filename} is an image with dimensions {self.width}x{height}\"\n\nclass Video(Image):\n    def __init__(self, filename, width, height, duration):\n        super().__init__(filename, width, height)\n        self.duration = duration\n    def format(self):\n        return f\"{self.filename} is a video with dimensions {self.width}x{height} and duration {self.duration}\"\n\nclass Audio(Media):\n    def __init__(self, filename, duration):\n        super().__init__(filename)\n        self.duration = duration\n    def format(self):\n        return f\"{self.filename} is an audio file with a duration of {self.duration}\"\n</code></pre> You can use a class diagram to represent the relationships between these classes. Here is an example of what the class diagram might look like: <pre><code>classDiagram\n    Media &lt;|-- Image\n    Image &lt;|-- Video\n    Media &lt;|-- Audio\n    class Media {\n        filename: str\n        format(): str\n    }\n    class Image {\n        width: int\n        height: int\n        format(): str\n    }\n    class Video {\n        duration: int\n        format(): str\n    }\n    class Audio {\n        duration: int\n        format(): str\n    }</code></pre></li> </ul>"},{"location":"9.%20Object_Oriented_Programming/#polymorphism","title":"Polymorphism","text":"<ul> <li>There are 2 main types of polymorphism:</li> <li> <p>Compile-time polymorphism (method overloading)</p> <ul> <li>Python does not support method overloading. However, you can achieve similar functionality using default arguments.</li> <li>If you have a method with the same name and same number of parameters but different types, Python will use the last method defined with that name and number of parameters. For example: <pre><code>def add(a: int, b: int):\n    print('int')\n    return a + b\ndef add(a: float, b: float):\n    print('float')\n    return a + b\ndef add(a: str, b: str):\n    print('str')\n    return a + b\n\nprint(add(1, 2)) # Output: 3\nprint(add(1.5, 2.5)) # Output: 4.0\nprint(add(\"Hello\", \"World\")) # Output: HelloWorld\n</code></pre> Notice when you run this code that the last method defined with the name \"add\" and 2 parameters is used. </li> </ul> </li> <li> <p>Runtime polymorphism (method overriding) </p> <ul> <li>also known as dynamic polymorphism or virtual functions.</li> <li>This is when a method in a subclass has the same name as a method in its superclass.</li> <li>The method in the subclass overrides the method in the superclass. <pre><code>class Animal:\n    def speak(self):\n        pass\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof!\"\nclass Cat(Animal):\n    def speak(self):\n        return \"Meow!\"\n\ndef animal_sound(animal: Animal):\n    print(animal.speak())\n\ndog = Dog()\ncat = Cat()\nanimal_sound(dog) # Output: Woof!\nanimal_sound(cat) # Output: Meow!\n</code></pre> Notice that the <code>speak</code> method in the <code>Dog</code> and <code>Cat</code> classes override the <code>speak</code> method in the <code>Animal</code> class. When we call the <code>animal_sound</code> function with a <code>Dog</code> or <code>Cat</code> object, it calls the overridden <code>speak</code> method.</li> </ul> </li> </ul>"},{"location":"9.%20Object_Oriented_Programming/#operator-overloading","title":"Operator Overloading","text":"<ul> <li>Some operators such as <code>+</code> and <code>-</code> can be \u201coverloaded\u201d such that they can have more abilities beyond simple arithmetic.</li> <li> <p>In your terminal window, type <code>code vault.py</code>. Then, code as follows: <pre><code>class Vault:\n    def __init__(self, galleons=0, sickles=0, knuts=0):\n        self.galleons = galleons\n        self.sickles = sickles\n        self.knuts = knuts\n\n    def __str__(self):\n        return f\"{self.galleons} Galleons, {self.sickles} Sickles, {self.knuts} Knuts\"\n\n    def __add__(self, other):\n        galleons = self.galleons + other.galleons\n        sickles = self.sickles + other.sickles\n        knuts = self.knuts + other.knuts\n        return Vault(galleons, sickles, knuts)\n\n\npotter = Vault(100, 50, 25)\nprint(potter)\n\nweasley = Vault(25, 50, 100)\nprint(weasley)\n\ntotal = potter + weasley\nprint(total)\n</code></pre> Notice how the <code>__str__</code> method returns a formatted string. Further, notice how the <code>__add__</code> method allows for the addition of the values of two vaults. <code>self</code> is what is on the left of the <code>+</code> operand. <code>other</code> is what is right of the <code>+</code>.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of operator overloading.</p> </li> </ul>"},{"location":"9.%20Object_Oriented_Programming/#decorators","title":"Decorators","text":"<ul> <li> <p>Properties can be utilised to harden our code. In Python, we define properties using function \u201cdecorators\u201d, which begin with <code>@</code>. Modify your code as follows: <pre><code>class Student:\n    def __init__(self, name, house):\n        if not name:\n            raise ValueError(\"Invalid name\")\n        self.name = name\n        self.house = house\n\n    def __str__(self):\n        return f\"{self.name} from {self.house}\"\n\n    # Getter for house\n    @property\n    def house(self):\n        return self._house\n\n    # Setter for house\n    @house.setter\n    def house(self, house):\n        if house not in [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"]:\n            raise ValueError(\"Invalid house\")\n        self._house = house\n\n\ndef main():\n    student = get_student()\n    print(student)\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return Student(name, house)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice how we\u2019ve written <code>@property</code> above a function called <code>house</code>. Doing so defines <code>house</code> as a property of our class. With <code>house</code> as a property, we gain the ability to define how some attribute of our class, <code>_house</code>, should be set and retrieved. Indeed, we can now define a function called a \u201csetter\u201d, via <code>@house.setter</code>, which will be called whenever the house property is set\u2014for example, with <code>student.house = \"Gryffindor\"</code>. Here, we\u2019ve made our setter validate values of <code>house</code> for us. Notice how we raise a <code>ValueError</code> if the value of <code>house</code> is not any of the Harry Potter houses, otherwise, we\u2019ll use <code>house</code> to update the value of <code>_house</code>. Why <code>_house</code> and not <code>house</code>? <code>house</code> is a property of our class, with functions via which a user attempts to set our class attribute. <code>_house</code> is that class attribute itself. The leading underscore, <code>_</code>, indicates to users they need not (and indeed, shouldn\u2019t!) modify this value directly. <code>_house</code> should only be set through the house setter. Notice how the <code>house</code> property simply returns that value of <code>_house</code>, our class attribute that has presumably been validated using our house setter. When a user calls <code>student.house</code>, they\u2019re getting the value of <code>_house</code> through our house \u201cgetter\u201d.</p> </li> <li> <p>In addition to the name of the house, we can protect the name of our student as well. Modify your code as follows: <pre><code>class Student:\n    def __init__(self, name, house):\n        self.name = name\n        self.house = house\n\n    def __str__(self):\n        return f\"{self.name} from {self.house}\"\n\n    # Getter for name\n    @property\n    def name(self):\n        return self._name\n\n    # Setter for name\n    @name.setter\n    def name(self, name):\n        if not name:\n            raise ValueError(\"Invalid name\")\n        self._name = name\n\n    @property\n    def house(self):\n        return self._house\n\n    @house.setter\n    def house(self, house):\n        if house not in [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"]:\n            raise ValueError(\"Invalid house\")\n        self._house = house\n\n\ndef main():\n    student = get_student()\n    print(student)\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return Student(name, house)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> Notice how, much like the previous code, we provide a getter and setter for the name.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of methods.</p> </li> </ul>"},{"location":"9.%20Object_Oriented_Programming/#class-methods","title":"Class Methods","text":"<ul> <li>Sometimes, we want to add functionality to a class itself, not to instances of that class.</li> <li><code>@classmethod</code> is a function that we can use to add functionality to a class as a whole.</li> <li> <p>Here\u2019s an example of not using a class method. In your terminal window, type <code>code hat.py</code> and code as follows: <pre><code>import random\n\n\nclass Hat:\n    def __init__(self):\n        self.houses = [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"]\n\n    def sort(self, name):\n        print(name, \"is in\", random.choice(self.houses))\n\n\nhat = Hat()\nhat.sort(\"Harry\")\n</code></pre> Notice how when we pass the name of the student to the sorting hat, it will tell us what house is assigned to the student. Notice that <code>hat = Hat()</code> instantiates a <code>hat</code>. The <code>sort</code> functionality is always handled by the instance of the class <code>Hat</code>. By executing <code>hat.sort(\"Harry\")</code>, we pass the name of the student to the <code>sort</code> method of the particular instance of <code>Hat</code>, which we\u2019ve called <code>hat</code>.</p> </li> <li> <p>We may want, though, to run the <code>sort</code> function without creating a particular instance of the sorting hat (there\u2019s only one, after all!). We can modify our code as follows: <pre><code>import random\n\n\nclass Hat:\n\n    houses = [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"]\n\n    @classmethod\n    def sort(cls, name):\n        print(name, \"is in\", random.choice(cls.houses))\n\n\nHat.sort(\"Harry\")\n</code></pre> Notice how the <code>__init__</code> method is removed because we don\u2019t need to instantiate a <code>hat</code> anywhere in our code. <code>self</code>, therefore, is no longer relevant and is removed. We specify this sort as a <code>@classmethod</code>, replacing <code>self</code> with <code>cls</code>. Finally, notice how <code>Hat</code> is capitalised by convention near the end of this code, because this is the name of our class.</p> </li> <li> <p>Returning back to <code>students.py</code> we can modify our code as follows, addressing some missed opportunities related to <code>@classmethods:</code> <pre><code>        class Student:\n            def __init__(self, name, house):\n                self.name = name\n                self.house = house\n\n            def __str__(self):\n                return f\"{self.name} from {self.house}\"\n\n            @classmethod\n            def get(cls):\n                name = input(\"Name: \")\n                house = input(\"House: \")\n                return cls(name, house)\n\n\n        def main():\n            student = Student.get()\n            print(student)\n\n\n        if __name__ == \"__main__\":\n            main()\n</code></pre> Notice that <code>get_student</code> is removed and a <code>@classmethod</code> called <code>get</code> is created. This method can now be called without having to create a student first.</p> </li> </ul>"},{"location":"9.%20Object_Oriented_Programming/#static-methods","title":"Static Methods","text":"<ul> <li>It turns out that besides <code>@classmethods</code>, which are distinct from instance methods, there are other types of methods as well.</li> <li>Using <code>@staticmethod</code> may be something you might wish to explore. While not covered explicitly in this course, you are welcome to go and learn more about static methods and their distinction from class methods.</li> </ul>"},{"location":"9.%20Object_Oriented_Programming/#summing-up","title":"Summing Up","text":"<p>Now, you\u2019ve learned a whole new level of capability through object-oriented programming.</p> <ul> <li>Object-oriented programming</li> <li>Classes</li> <li>raise</li> <li>Class Methods</li> <li>Static Methods</li> <li>Inheritance</li> <li>Polymorphism</li> <li>Abstraction</li> <li>Encapsulation</li> <li>Operator Overloading</li> </ul>"},{"location":"A.%20Data%20Structures/","title":"Data Structures","text":""},{"location":"A.%20Data%20Structures/#introduction-to-data-structures","title":"Introduction to Data Structures","text":"<p>Data structures are fundamental concepts in computer science that organise and store data efficiently. They provide a way to access, search, insert, and delete data in an organised manner. Common data structures include arrays, linked lists, stacks, queues, trees, graphs, and hash tables.</p>"},{"location":"A.%20Data%20Structures/#arrays","title":"Arrays","text":"<p>An array is a collection of elements of the same type stored at contiguous memory locations. Each element can be accessed using its index, which starts from 0. Arrays are useful for storing fixed-size collections of data.</p>"},{"location":"A.%20Data%20Structures/#example-in-python","title":"Example in Python:","text":"<pre><code># Creating an array of integers\nmy_array = [1, 2, 3, 4, 5]\n\n# Accessing elements by index\nprint(my_array[0])  # Output: 1\nprint(my_array[3])  # Output: 4\n# Modifying elements\nmy_array[2] = 10\nprint(my_array)  # Output: [1, 2, 10, 4, 5]\n</code></pre>"},{"location":"A.%20Data%20Structures/#linked-lists","title":"Linked Lists","text":"<p>A linked list is a linear data structure where each element (node) contains a value and a reference to the next node. Unlike arrays, linked lists do not require contiguous memory locations. They are useful for dynamic data structures that can grow or shrink at runtime.</p>"},{"location":"A.%20Data%20Structures/#example-in-python_1","title":"Example in Python:","text":"<pre><code># Creating a simple linked list\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, value: Node):\n        new_node = Node(value)\n        if not self.head:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_node\n\n    def remove(self, value: Node):\n        if not self.head:\n            return\n        if self.head.value == value:\n            self.head = self.head.next\n            return\n        current = self.head\n        while current and current.next:\n            if current.next.value == value:\n                current.next = current.next.next\n                return\n            current = current.next\n</code></pre>"},{"location":"A.%20Data%20Structures/#example-usage","title":"Example usage","text":"<p><pre><code>linked_list = LinkedList()\nlinked_list.append(1)\nlinked_list.append(2)\nlinked_list.remove(1)\n</code></pre> The result of the above code is that the linked list contains only the value <code>2</code>.</p>"},{"location":"A.%20Data%20Structures/#_1","title":"Data Structures","text":"<p>head = Node(1) second_node = Node(2) third_node = Node(3)</p> <p>head.next = second_node second_node.next = third_node ```</p>"},{"location":"B.%20Algorithms/","title":"Algorithms","text":"<p>There are some common algorithms that you should understand. These include sorting algorithms, searching algorithms, dynamic programming, and graph algorithms. Each of these algorithms has its own strengths and weaknesses, so it's important to understand when to use each one.</p> <p>Note</p> <p>More general information about algorithms can be found in the NSW Software Engineering reference material. The content here is more about the implementation in Python.</p> <ul> <li>Algorithms</li> <li>Algorithm Complexity | BigO</li> </ul>"},{"location":"B.%20Algorithms/#performance-analysis","title":"Performance Analysis","text":"<p>Performance analysis is the process of measuring and analysing the efficiency of an algorithm or program. This includes identifying bottlenecks, optimising code, and choosing the right data structures. Performance analysis is important because it can help you improve the speed and scalability of your applications.</p> <p>A commonly used unit for measuring performance is Big O notation, which describes the upper bound of an algorithm's time or space complexity as the input size grows. For example, an algorithm with a time complexity of <code>O(n^2)</code> will take twice as long to run when the input size doubles.</p> <p>There are many ways to profile your python code. The quickest way is to read the code and rationalise the data structures used, but this can be time-consuming for large codebases.</p> <ul> <li>You can use <code>cProfile</code> module which is built into Python. It provides a high-level interface for profiling Python programs. You can use it to measure the time taken by different functions or code blocks, and identify which parts of your program are taking the most time.</li> </ul> <p> <ul> <li>You can use <code>timeit</code> module which is also built into Python. It provides a simple way to measure the execution time of small code snippets. You can use it to compare the performance of different algorithms or implementations.</li> </ul> <p> <ul> <li>Pytest is a popular testing framework for Python, but it also provides profiling capabilities. You can use it to measure the performance of your tests and identify which parts of your code are taking the most time. There is a handy addon called <code>pytest-profiling</code> which will generate a graphical report showing the performance of your tested code. Internally it uses <code>cProfile</code> to collect profiling data.</li> </ul> <p>"},{"location":"B.%20Algorithms/#sorting-algorithms","title":"Sorting Algorithms","text":"<p>Sorting algorithms are used to arrange a list of items in a specific order. There are many different types of sorting algorithms, including:</p> <ul> <li>bubble sort</li> <li>insertion sort</li> <li>selection sort</li> <li>merge sort</li> <li>quicksort</li> <li>heapsort</li> </ul> <p>Each one has its own time complexity, which is the amount of time it takes to run as a function of the size of the input. For example, bubble sort has a time complexity of <code>O(n^2)</code>, while merge sort has a time complexity of <code>O(n log n)</code>. The choice of sorting algorithm depends on the specific requirements of your application.</p> <p>Tip</p> <p>Using a pack of cards can help you understand the concept of sorting algorithms. Mix up the cards and then try to sort them using different sorting algorithms. This can help you understand how each algorithm works and which one is most efficient.</p>"},{"location":"B.%20Algorithms/#bubble-sort","title":"Bubble Sort","text":"<ul> <li>Bubble sort is a simple and intuitive sorting algorithm that works by repeatedly swapping adjacent elements if they are in the wrong order. It gets its name from the way smaller elements \"bubble\" to the top of the list.  <pre><code>import timeit\n\ndef bubble_sort(arr):\n    ''' Note that is modifies the array in-place. '''\n    n = len(arr)\n    for i in range(n - 1):\n        for j in range(n-i-1):\n            if arr[j] &gt; arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\nif __name__ == \"__main__\":\n    input = [64, 34, 25, 12, 22, 11, 90]\n    print(\"Unsorted array is:\", list(input))\n    bubble_sort(input)\n    print (\"Sorted array is:\", input)\n\n    result = timeit.timeit(lambda: bubble_sort(list(input)))\n    print(f\"Time taken to sort the array using Bubble Sort: {result} seconds for 100000 runs.\")\n</code></pre></li> <li>Bubble sort has a time complexity of <code>O(n^2)</code>, which makes it inefficient for large lists. However, it is easy to understand and implement.</li> </ul> <p>In the code there are a few things you should be aware of: - As the bubble sort is done in-place you need to provide a copy of the input array when calling <code>timeit.timeit</code> so that the original array is not modified. - The default number of runs for <code>timeit.timeit</code> is 1,000,000. If you want to change this you can do so by passing the <code>number</code> parameter. - The prints are a separate step and not part of timing analysis as printing to the screen is time consuming and would influence the result</p> <p>Try it yourself!</p> <ul> <li>Modify the code above so that it doesn't make a copy of the list, does the time taken to sort the array change? Why or why not?</li> <li>Change the number of runs for <code>timeit.timeit</code> and observe how it affects the result.</li> <li>Try creating a bigger lists using <code>random.sample()</code>, and see how bubble sort performs on them.</li> <li>Include print statements in the <code>bubble_sort</code> method to see how it impacts the time measurement.</li> </ul>"},{"location":"B.%20Algorithms/#insertion-sort","title":"Insertion Sort","text":"<ul> <li>Insertion sort has a time complexity of <code>O(n^2)</code>, but it is more efficient than bubble sort for small lists or nearly sorted lists. It works by building the final sorted array one item at a time, inserting each new element into its correct position in the already-sorted portion of the array.</li> </ul> <pre><code>def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j &gt;=0 and key &lt; arr[j] :\n                arr[j + 1] = arr[j]\n                j -= 1\n        arr[j + 1] = key\n    return arr\n</code></pre>"},{"location":"B.%20Algorithms/#selection-sort","title":"Selection Sort","text":""},{"location":"B.%20Algorithms/#merge-sort","title":"Merge Sort","text":""},{"location":"B.%20Algorithms/#quicksort","title":"Quicksort","text":""},{"location":"B.%20Algorithms/#heapsort","title":"Heapsort","text":""},{"location":"B.%20Algorithms/#search-algorithms","title":"Search Algorithms","text":"<p>The following search algorithms are covered in this section: - Linear Search - Binary Search - Depth-First Search (DFS) - Breadth-First Search (BFS)</p>"}]}